// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: achievements.proto

package api_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Achievement struct {
	AchievementId uint32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 賞の名前
	Award       string `protobuf:"bytes,3,opt,name=award,proto3" json:"award,omitempty"`
	Url         string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// レスポンスのみ
	ImageUrl string `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// 受賞した日付or作品を発表した日付
	HappenedAt *types.Timestamp `protobuf:"bytes,7,opt,name=happened_at,json=happenedAt,proto3" json:"happened_at,omitempty"`
	// 作品・チームに参加したメンバー
	Members []*User `protobuf:"bytes,8,rep,name=members,proto3" json:"members,omitempty"`
	// レスポンスのみ。プロフィールを非公開にしているメンバーの数
	HiddenMembersCount   int32    `protobuf:"varint,9,opt,name=hidden_members_count,json=hiddenMembersCount,proto3" json:"hidden_members_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Achievement) Reset()         { *m = Achievement{} }
func (m *Achievement) String() string { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()    {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{0}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetAchievementId() uint32 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

func (m *Achievement) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Achievement) GetAward() string {
	if m != nil {
		return m.Award
	}
	return ""
}

func (m *Achievement) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Achievement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Achievement) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Achievement) GetHappenedAt() *types.Timestamp {
	if m != nil {
		return m.HappenedAt
	}
	return nil
}

func (m *Achievement) GetMembers() []*User {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Achievement) GetHiddenMembersCount() int32 {
	if m != nil {
		return m.HiddenMembersCount
	}
	return 0
}

type ListAchievementsRequest struct {
	PageToken            string   `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAchievementsRequest) Reset()         { *m = ListAchievementsRequest{} }
func (m *ListAchievementsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAchievementsRequest) ProtoMessage()    {}
func (*ListAchievementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{1}
}
func (m *ListAchievementsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAchievementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAchievementsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAchievementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAchievementsRequest.Merge(m, src)
}
func (m *ListAchievementsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAchievementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAchievementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAchievementsRequest proto.InternalMessageInfo

func (m *ListAchievementsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListAchievementsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListAchievementsResponse struct {
	Achievements         []*Achievement `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
	NextPageToken        string         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListAchievementsResponse) Reset()         { *m = ListAchievementsResponse{} }
func (m *ListAchievementsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAchievementsResponse) ProtoMessage()    {}
func (*ListAchievementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{2}
}
func (m *ListAchievementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAchievementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAchievementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAchievementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAchievementsResponse.Merge(m, src)
}
func (m *ListAchievementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAchievementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAchievementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAchievementsResponse proto.InternalMessageInfo

func (m *ListAchievementsResponse) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *ListAchievementsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetAchievementRequest struct {
	AchievementId        uint32   `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAchievementRequest) Reset()         { *m = GetAchievementRequest{} }
func (m *GetAchievementRequest) String() string { return proto.CompactTextString(m) }
func (*GetAchievementRequest) ProtoMessage()    {}
func (*GetAchievementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{3}
}
func (m *GetAchievementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAchievementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAchievementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAchievementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAchievementRequest.Merge(m, src)
}
func (m *GetAchievementRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAchievementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAchievementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAchievementRequest proto.InternalMessageInfo

func (m *GetAchievementRequest) GetAchievementId() uint32 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

type CreateAchievementRequest struct {
	Achievement          *Achievement `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateAchievementRequest) Reset()         { *m = CreateAchievementRequest{} }
func (m *CreateAchievementRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAchievementRequest) ProtoMessage()    {}
func (*CreateAchievementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{4}
}
func (m *CreateAchievementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAchievementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAchievementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAchievementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAchievementRequest.Merge(m, src)
}
func (m *CreateAchievementRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAchievementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAchievementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAchievementRequest proto.InternalMessageInfo

func (m *CreateAchievementRequest) GetAchievement() *Achievement {
	if m != nil {
		return m.Achievement
	}
	return nil
}

type UpdateAchievementRequest struct {
	Achievement          *Achievement `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateAchievementRequest) Reset()         { *m = UpdateAchievementRequest{} }
func (m *UpdateAchievementRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAchievementRequest) ProtoMessage()    {}
func (*UpdateAchievementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{5}
}
func (m *UpdateAchievementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAchievementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAchievementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAchievementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAchievementRequest.Merge(m, src)
}
func (m *UpdateAchievementRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAchievementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAchievementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAchievementRequest proto.InternalMessageInfo

func (m *UpdateAchievementRequest) GetAchievement() *Achievement {
	if m != nil {
		return m.Achievement
	}
	return nil
}

type UpdateAchievementImageRequest struct {
	AchievementId        uint32   `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Image                []byte   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAchievementImageRequest) Reset()         { *m = UpdateAchievementImageRequest{} }
func (m *UpdateAchievementImageRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAchievementImageRequest) ProtoMessage()    {}
func (*UpdateAchievementImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{6}
}
func (m *UpdateAchievementImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAchievementImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAchievementImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAchievementImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAchievementImageRequest.Merge(m, src)
}
func (m *UpdateAchievementImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAchievementImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAchievementImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAchievementImageRequest proto.InternalMessageInfo

func (m *UpdateAchievementImageRequest) GetAchievementId() uint32 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

func (m *UpdateAchievementImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type DeleteAchievementRequest struct {
	AchievementId        uint32   `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAchievementRequest) Reset()         { *m = DeleteAchievementRequest{} }
func (m *DeleteAchievementRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAchievementRequest) ProtoMessage()    {}
func (*DeleteAchievementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eaea0ffd62e20aae, []int{7}
}
func (m *DeleteAchievementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAchievementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAchievementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAchievementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAchievementRequest.Merge(m, src)
}
func (m *DeleteAchievementRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAchievementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAchievementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAchievementRequest proto.InternalMessageInfo

func (m *DeleteAchievementRequest) GetAchievementId() uint32 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

func init() {
	proto.RegisterType((*Achievement)(nil), "programming_lab.prolab_accounts.Achievement")
	proto.RegisterType((*ListAchievementsRequest)(nil), "programming_lab.prolab_accounts.ListAchievementsRequest")
	proto.RegisterType((*ListAchievementsResponse)(nil), "programming_lab.prolab_accounts.ListAchievementsResponse")
	proto.RegisterType((*GetAchievementRequest)(nil), "programming_lab.prolab_accounts.GetAchievementRequest")
	proto.RegisterType((*CreateAchievementRequest)(nil), "programming_lab.prolab_accounts.CreateAchievementRequest")
	proto.RegisterType((*UpdateAchievementRequest)(nil), "programming_lab.prolab_accounts.UpdateAchievementRequest")
	proto.RegisterType((*UpdateAchievementImageRequest)(nil), "programming_lab.prolab_accounts.UpdateAchievementImageRequest")
	proto.RegisterType((*DeleteAchievementRequest)(nil), "programming_lab.prolab_accounts.DeleteAchievementRequest")
}

func init() { proto.RegisterFile("achievements.proto", fileDescriptor_eaea0ffd62e20aae) }

var fileDescriptor_eaea0ffd62e20aae = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xd6, 0xe0, 0x1a, 0xec, 0x31, 0x86, 0x32, 0x02, 0xba, 0x35, 0x60, 0xac, 0x55, 0x41, 0x06,
	0x95, 0xdd, 0xca, 0xad, 0x50, 0x01, 0x09, 0x04, 0xb4, 0xaa, 0x90, 0x68, 0x85, 0x16, 0x7c, 0xa9,
	0x22, 0xad, 0x66, 0xbd, 0x13, 0x7b, 0xc2, 0xfe, 0xca, 0xee, 0x18, 0x08, 0x51, 0xa4, 0x28, 0x4a,
	0xae, 0xb9, 0x24, 0x67, 0x94, 0xff, 0x22, 0xa7, 0xdc, 0x73, 0x8c, 0x94, 0x3f, 0x20, 0x91, 0x95,
	0x3f, 0x24, 0x9a, 0x59, 0x6f, 0xd8, 0xf5, 0x8f, 0xd8, 0xce, 0x21, 0x37, 0xef, 0x7b, 0x6f, 0xde,
	0xfb, 0xbe, 0x6f, 0xbe, 0x27, 0x0f, 0x44, 0xb8, 0xd6, 0xa0, 0xe4, 0x82, 0xd8, 0xc4, 0x61, 0x81,
	0xe2, 0xf9, 0x2e, 0x73, 0xd1, 0xb2, 0xe7, 0xbb, 0x75, 0x1f, 0xdb, 0x36, 0x75, 0xea, 0xba, 0x85,
	0x0d, 0x1e, 0xb6, 0xb0, 0xa1, 0xe3, 0x5a, 0xcd, 0x6d, 0x3a, 0x2c, 0x28, 0x6c, 0xd6, 0x29, 0x6b,
	0x34, 0x0d, 0xa5, 0xe6, 0xda, 0xaa, 0x7d, 0x49, 0xd9, 0xb9, 0x7b, 0xa9, 0xd6, 0xdd, 0x0d, 0x71,
	0x7a, 0xe3, 0x02, 0x5b, 0xd4, 0xc4, 0xcc, 0xf5, 0x03, 0xf5, 0xcb, 0xcf, 0xb0, 0x71, 0x61, 0xb1,
	0xee, 0xba, 0x75, 0x8b, 0xa8, 0xd8, 0xa3, 0x2a, 0x76, 0x1c, 0x97, 0x61, 0x46, 0x5d, 0xa7, 0x3d,
	0xb6, 0xb0, 0xd0, 0xce, 0x8a, 0x2f, 0xa3, 0x79, 0x57, 0x25, 0xb6, 0xc7, 0x1e, 0xb4, 0x93, 0xcb,
	0x9d, 0x49, 0x46, 0x6d, 0x12, 0x30, 0x6c, 0x7b, 0xed, 0x82, 0x5c, 0x33, 0x20, 0x7e, 0xbb, 0x95,
	0xfc, 0x2c, 0x05, 0x73, 0xfb, 0xb7, 0xc4, 0xd0, 0x0a, 0x9c, 0x8a, 0xf1, 0xd4, 0xa9, 0x29, 0x81,
	0x12, 0x28, 0xe7, 0xb5, 0x7c, 0x2c, 0x7a, 0x64, 0xa2, 0x25, 0x98, 0x66, 0x94, 0x59, 0x44, 0x1a,
	0x2b, 0x81, 0x72, 0xf6, 0x60, 0xa2, 0xf5, 0x61, 0x39, 0x75, 0xf5, 0x18, 0x68, 0x61, 0x94, 0xa7,
	0xf1, 0x25, 0xf6, 0x4d, 0x29, 0xd5, 0x91, 0x16, 0x51, 0xf4, 0x33, 0x4c, 0x35, 0x7d, 0x4b, 0xfa,
	0x21, 0x99, 0xe4, 0x31, 0xb4, 0x06, 0x73, 0x26, 0x09, 0x6a, 0x3e, 0xf5, 0x38, 0x61, 0x29, 0x1d,
	0x2f, 0xc9, 0x68, 0xf1, 0x1c, 0x5a, 0x80, 0x59, 0x6a, 0xe3, 0x3a, 0xd1, 0x79, 0xaf, 0x71, 0x5e,
	0xa8, 0x65, 0x44, 0xa0, 0xea, 0x5b, 0x68, 0x07, 0xe6, 0x1a, 0xd8, 0xf3, 0x88, 0x43, 0x4c, 0x1d,
	0x33, 0x69, 0xa2, 0x04, 0xca, 0xb9, 0x4a, 0x41, 0x09, 0xb5, 0x51, 0x22, 0x6d, 0x94, 0xb3, 0x48,
	0x1b, 0x0d, 0x46, 0xe5, 0xfb, 0x0c, 0xed, 0xc1, 0x09, 0x9b, 0xd8, 0x06, 0xf1, 0x03, 0x29, 0x53,
	0x4a, 0x95, 0x73, 0x95, 0x15, 0x65, 0xc0, 0x45, 0x2b, 0xd5, 0x80, 0xf8, 0x5a, 0x74, 0x0a, 0xfd,
	0x06, 0x67, 0x1b, 0xd4, 0x34, 0x89, 0xa3, 0xb7, 0x23, 0xba, 0x28, 0x93, 0xb2, 0x25, 0x50, 0x4e,
	0x6b, 0x28, 0xcc, 0xfd, 0x1b, 0xa6, 0x0e, 0x79, 0x46, 0xae, 0xc2, 0x9f, 0x8e, 0x69, 0xc0, 0x62,
	0x57, 0x11, 0x68, 0xe4, 0x7e, 0x93, 0x04, 0x0c, 0x2d, 0x41, 0xe8, 0x71, 0x9a, 0xcc, 0x3d, 0x27,
	0x8e, 0xb8, 0x8e, 0xac, 0x96, 0xe5, 0x91, 0x33, 0x1e, 0xe0, 0x32, 0x88, 0x74, 0x40, 0xaf, 0xc3,
	0xeb, 0x48, 0x6b, 0x19, 0x1e, 0x38, 0xa5, 0xd7, 0x44, 0x7e, 0x09, 0xa0, 0xd4, 0xdd, 0x37, 0xf0,
	0x5c, 0x27, 0x20, 0xe8, 0x04, 0x4e, 0xc6, 0x3d, 0x2d, 0x01, 0xc1, 0xf5, 0xd7, 0x81, 0x5c, 0x63,
	0xcd, 0xb4, 0x44, 0x07, 0xb4, 0x0a, 0xa7, 0x1d, 0x72, 0xc5, 0xf4, 0x18, 0x5e, 0x61, 0x10, 0x2d,
	0xcf, 0xc3, 0x27, 0x11, 0x66, 0x79, 0x17, 0xce, 0xfd, 0x43, 0xe2, 0xa0, 0x22, 0xae, 0xc3, 0xd9,
	0x4f, 0xbe, 0x07, 0xa5, 0x43, 0x9f, 0x60, 0x46, 0x7a, 0xb4, 0xf8, 0x0f, 0xe6, 0x62, 0xc5, 0xe2,
	0xfc, 0xa8, 0xa4, 0xe2, 0x0d, 0xf8, 0xac, 0xaa, 0x67, 0x7e, 0x9f, 0x59, 0x77, 0xe0, 0x52, 0xd7,
	0xac, 0x23, 0x6e, 0xe9, 0xd1, 0xf4, 0x41, 0xb3, 0x30, 0x2d, 0x36, 0x41, 0xa8, 0x3f, 0xa9, 0x85,
	0x1f, 0xf2, 0x3e, 0x94, 0xfe, 0x22, 0x16, 0xe9, 0xc9, 0x64, 0xb8, 0xc6, 0x95, 0xa7, 0x19, 0x88,
	0x62, 0xa7, 0x4f, 0x89, 0x7f, 0x41, 0x6b, 0x04, 0xdd, 0x00, 0xf8, 0x63, 0xa7, 0xcd, 0xd0, 0x9f,
	0x03, 0x75, 0xe8, 0xe3, 0xf8, 0xc2, 0xd6, 0x37, 0x9c, 0x0c, 0x3d, 0x2d, 0xcf, 0x3d, 0x79, 0xff,
	0xe9, 0xc5, 0xd8, 0x34, 0xca, 0xab, 0x09, 0x63, 0xde, 0x00, 0x38, 0x95, 0x74, 0x1c, 0xda, 0x1c,
	0x38, 0xa4, 0xa7, 0x45, 0x0b, 0x23, 0x5d, 0xaf, 0xbc, 0x2a, 0xf0, 0x94, 0x50, 0x31, 0x81, 0x47,
	0x7d, 0x98, 0x14, 0xfb, 0x11, 0x7a, 0x05, 0xe0, 0x4c, 0x97, 0xa5, 0xd1, 0x60, 0x21, 0xfa, 0xad,
	0xc1, 0x88, 0x30, 0x65, 0x01, 0x73, 0x51, 0x4e, 0xca, 0xb6, 0x1d, 0x37, 0x27, 0x7a, 0x03, 0xe0,
	0x4c, 0x97, 0x3b, 0x87, 0x80, 0xd8, 0x6f, 0x7b, 0x46, 0x84, 0xb8, 0x27, 0x20, 0x6e, 0x55, 0xd6,
	0xfb, 0x2b, 0xa9, 0x74, 0xa8, 0x9a, 0xc4, 0xff, 0x1a, 0xc0, 0xf9, 0xde, 0xdb, 0x85, 0x76, 0x47,
	0x27, 0x11, 0x5f, 0xcb, 0x11, 0x99, 0xa8, 0x82, 0xc9, 0x9a, 0xfc, 0xcb, 0xd7, 0x3d, 0xa1, 0x8a,
	0xad, 0xdd, 0x06, 0xeb, 0xe8, 0x39, 0x80, 0x33, 0x5d, 0x9b, 0x3b, 0x84, 0xf2, 0xfd, 0xb6, 0xbd,
	0x30, 0xdf, 0xf5, 0x47, 0xf8, 0x37, 0x7f, 0x41, 0x44, 0x6e, 0x5d, 0x1f, 0xe0, 0xd6, 0x83, 0x83,
	0xb7, 0xad, 0x22, 0x78, 0xd7, 0x2a, 0x82, 0x8f, 0xad, 0x22, 0xf8, 0xff, 0x8f, 0xd8, 0x23, 0xe7,
	0xe4, 0x16, 0xd2, 0x31, 0x36, 0xd4, 0x10, 0xd1, 0x46, 0x84, 0x88, 0xbf, 0x67, 0x76, 0xb0, 0x47,
	0x75, 0xcf, 0x30, 0xc6, 0xc5, 0xec, 0xdf, 0x3f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x08, 0xdc,
	0xec, 0x58, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AchievementServiceClient is the client API for AchievementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AchievementServiceClient interface {
	ListAchievements(ctx context.Context, in *ListAchievementsRequest, opts ...grpc.CallOption) (*ListAchievementsResponse, error)
	GetAchievement(ctx context.Context, in *GetAchievementRequest, opts ...grpc.CallOption) (*Achievement, error)
	CreateAchievement(ctx context.Context, in *CreateAchievementRequest, opts ...grpc.CallOption) (*Achievement, error)
	UpdateAchievement(ctx context.Context, in *UpdateAchievementRequest, opts ...grpc.CallOption) (*Achievement, error)
	UpdateAchievementImage(ctx context.Context, in *UpdateAchievementImageRequest, opts ...grpc.CallOption) (*Achievement, error)
	DeleteAchievement(ctx context.Context, in *DeleteAchievementRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type achievementServiceClient struct {
	cc *grpc.ClientConn
}

func NewAchievementServiceClient(cc *grpc.ClientConn) AchievementServiceClient {
	return &achievementServiceClient{cc}
}

func (c *achievementServiceClient) ListAchievements(ctx context.Context, in *ListAchievementsRequest, opts ...grpc.CallOption) (*ListAchievementsResponse, error) {
	out := new(ListAchievementsResponse)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.AchievementService/ListAchievements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) GetAchievement(ctx context.Context, in *GetAchievementRequest, opts ...grpc.CallOption) (*Achievement, error) {
	out := new(Achievement)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.AchievementService/GetAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) CreateAchievement(ctx context.Context, in *CreateAchievementRequest, opts ...grpc.CallOption) (*Achievement, error) {
	out := new(Achievement)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.AchievementService/CreateAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) UpdateAchievement(ctx context.Context, in *UpdateAchievementRequest, opts ...grpc.CallOption) (*Achievement, error) {
	out := new(Achievement)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.AchievementService/UpdateAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) UpdateAchievementImage(ctx context.Context, in *UpdateAchievementImageRequest, opts ...grpc.CallOption) (*Achievement, error) {
	out := new(Achievement)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.AchievementService/UpdateAchievementImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) DeleteAchievement(ctx context.Context, in *DeleteAchievementRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.AchievementService/DeleteAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AchievementServiceServer is the server API for AchievementService service.
type AchievementServiceServer interface {
	ListAchievements(context.Context, *ListAchievementsRequest) (*ListAchievementsResponse, error)
	GetAchievement(context.Context, *GetAchievementRequest) (*Achievement, error)
	CreateAchievement(context.Context, *CreateAchievementRequest) (*Achievement, error)
	UpdateAchievement(context.Context, *UpdateAchievementRequest) (*Achievement, error)
	UpdateAchievementImage(context.Context, *UpdateAchievementImageRequest) (*Achievement, error)
	DeleteAchievement(context.Context, *DeleteAchievementRequest) (*empty.Empty, error)
}

func RegisterAchievementServiceServer(s *grpc.Server, srv AchievementServiceServer) {
	s.RegisterService(&_AchievementService_serviceDesc, srv)
}

func _AchievementService_ListAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAchievementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).ListAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.AchievementService/ListAchievements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).ListAchievements(ctx, req.(*ListAchievementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_GetAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).GetAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.AchievementService/GetAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).GetAchievement(ctx, req.(*GetAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_CreateAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).CreateAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.AchievementService/CreateAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).CreateAchievement(ctx, req.(*CreateAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_UpdateAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).UpdateAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.AchievementService/UpdateAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).UpdateAchievement(ctx, req.(*UpdateAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_UpdateAchievementImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAchievementImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).UpdateAchievementImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.AchievementService/UpdateAchievementImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).UpdateAchievementImage(ctx, req.(*UpdateAchievementImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_DeleteAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).DeleteAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.AchievementService/DeleteAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).DeleteAchievement(ctx, req.(*DeleteAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AchievementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "programming_lab.prolab_accounts.AchievementService",
	HandlerType: (*AchievementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAchievements",
			Handler:    _AchievementService_ListAchievements_Handler,
		},
		{
			MethodName: "GetAchievement",
			Handler:    _AchievementService_GetAchievement_Handler,
		},
		{
			MethodName: "CreateAchievement",
			Handler:    _AchievementService_CreateAchievement_Handler,
		},
		{
			MethodName: "UpdateAchievement",
			Handler:    _AchievementService_UpdateAchievement_Handler,
		},
		{
			MethodName: "UpdateAchievementImage",
			Handler:    _AchievementService_UpdateAchievementImage_Handler,
		},
		{
			MethodName: "DeleteAchievement",
			Handler:    _AchievementService_DeleteAchievement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "achievements.proto",
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AchievementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.AchievementId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Award) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.Award)))
		i += copy(dAtA[i:], m.Award)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if m.HappenedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.HappenedAt.Size()))
		n1, err := m.HappenedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x42
			i++
			i = encodeVarintAchievements(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HiddenMembersCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.HiddenMembersCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAchievementsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAchievementsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.PageToken)))
		i += copy(dAtA[i:], m.PageToken)
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAchievementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAchievementsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, msg := range m.Achievements {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAchievements(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NextPageToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.NextPageToken)))
		i += copy(dAtA[i:], m.NextPageToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAchievementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAchievementRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AchievementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.AchievementId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateAchievementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAchievementRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Achievement != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.Achievement.Size()))
		n2, err := m.Achievement.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateAchievementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAchievementRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Achievement != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.Achievement.Size()))
		n3, err := m.Achievement.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateAchievementImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAchievementImageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AchievementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.AchievementId))
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAchievementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAchievementRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AchievementId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchievements(dAtA, i, uint64(m.AchievementId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAchievements(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AchievementId != 0 {
		n += 1 + sovAchievements(uint64(m.AchievementId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	l = len(m.Award)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	if m.HappenedAt != nil {
		l = m.HappenedAt.Size()
		n += 1 + l + sovAchievements(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovAchievements(uint64(l))
		}
	}
	if m.HiddenMembersCount != 0 {
		n += 1 + sovAchievements(uint64(m.HiddenMembersCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAchievementsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovAchievements(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAchievementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovAchievements(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAchievementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AchievementId != 0 {
		n += 1 + sovAchievements(uint64(m.AchievementId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAchievementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Achievement != nil {
		l = m.Achievement.Size()
		n += 1 + l + sovAchievements(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAchievementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Achievement != nil {
		l = m.Achievement.Size()
		n += 1 + l + sovAchievements(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAchievementImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AchievementId != 0 {
		n += 1 + sovAchievements(uint64(m.AchievementId))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovAchievements(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAchievementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AchievementId != 0 {
		n += 1 + sovAchievements(uint64(m.AchievementId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAchievements(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAchievements(x uint64) (n int) {
	return sovAchievements(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementId", wireType)
			}
			m.AchievementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Award", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Award = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HappenedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HappenedAt == nil {
				m.HappenedAt = &types.Timestamp{}
			}
			if err := m.HappenedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &User{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenMembersCount", wireType)
			}
			m.HiddenMembersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HiddenMembersCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAchievementsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAchievementsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAchievementsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAchievementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAchievementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAchievementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAchievementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementId", wireType)
			}
			m.AchievementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAchievementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAchievementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAchievementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Achievement == nil {
				m.Achievement = &Achievement{}
			}
			if err := m.Achievement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAchievementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAchievementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAchievementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Achievement == nil {
				m.Achievement = &Achievement{}
			}
			if err := m.Achievement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAchievementImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAchievementImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAchievementImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementId", wireType)
			}
			m.AchievementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAchievements
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAchievementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAchievementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAchievementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementId", wireType)
			}
			m.AchievementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchievements(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchievements
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievements
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAchievements
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAchievements
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAchievements
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAchievements(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAchievements
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAchievements = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchievements   = fmt.Errorf("proto: integer overflow")
)
