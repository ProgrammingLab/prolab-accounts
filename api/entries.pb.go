// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entries.proto

package api_pb

import (
	_ "."
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Entry struct {
	EntryId              uint32           `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	Title                string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description          string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Content              string           `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Link                 string           `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	Author               *User            `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	ImageUrl             string           `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	PublishedAt          *types.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UpdatedAt            *types.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Blog                 *Blog            `protobuf:"bytes,10,opt,name=blog,proto3" json:"blog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2415c5d9575642c5, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetEntryId() uint32 {
	if m != nil {
		return m.EntryId
	}
	return 0
}

func (m *Entry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Entry) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Entry) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Entry) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Entry) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Entry) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Entry) GetPublishedAt() *types.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *Entry) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Entry) GetBlog() *Blog {
	if m != nil {
		return m.Blog
	}
	return nil
}

type ListEntriesRequest struct {
	PageToken            int64    `protobuf:"varint,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEntriesRequest) Reset()         { *m = ListEntriesRequest{} }
func (m *ListEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListEntriesRequest) ProtoMessage()    {}
func (*ListEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2415c5d9575642c5, []int{1}
}
func (m *ListEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntriesRequest.Merge(m, src)
}
func (m *ListEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntriesRequest proto.InternalMessageInfo

func (m *ListEntriesRequest) GetPageToken() int64 {
	if m != nil {
		return m.PageToken
	}
	return 0
}

func (m *ListEntriesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListEntriesResponse struct {
	Entries              []*Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	NextPageToken        int64    `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEntriesResponse) Reset()         { *m = ListEntriesResponse{} }
func (m *ListEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListEntriesResponse) ProtoMessage()    {}
func (*ListEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2415c5d9575642c5, []int{2}
}
func (m *ListEntriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEntriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntriesResponse.Merge(m, src)
}
func (m *ListEntriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntriesResponse proto.InternalMessageInfo

func (m *ListEntriesResponse) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *ListEntriesResponse) GetNextPageToken() int64 {
	if m != nil {
		return m.NextPageToken
	}
	return 0
}

func init() {
	proto.RegisterType((*Entry)(nil), "programming_lab.prolab_accounts.Entry")
	proto.RegisterType((*ListEntriesRequest)(nil), "programming_lab.prolab_accounts.ListEntriesRequest")
	proto.RegisterType((*ListEntriesResponse)(nil), "programming_lab.prolab_accounts.ListEntriesResponse")
}

func init() { proto.RegisterFile("entries.proto", fileDescriptor_2415c5d9575642c5) }

var fileDescriptor_2415c5d9575642c5 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x9b, 0xff, 0x4d, 0xa3, 0x34, 0x0b, 0x12, 0x4b, 0x0a, 0x49, 0x14, 0x89, 0x2a, 0x17,
	0x6c, 0x29, 0xed, 0x05, 0xa1, 0x4a, 0x10, 0xa9, 0x07, 0xa4, 0x1e, 0x22, 0xb7, 0xbd, 0x70, 0xb1,
	0xd6, 0xf6, 0xe2, 0xac, 0x6a, 0xef, 0x2e, 0xbb, 0xeb, 0x8a, 0xf4, 0x82, 0xc4, 0x2b, 0x70, 0x40,
	0xbc, 0x01, 0x8f, 0xc2, 0x11, 0x89, 0x07, 0x00, 0x45, 0xbc, 0x07, 0x68, 0xd7, 0x36, 0x14, 0x38,
	0x04, 0x72, 0xca, 0x7c, 0x33, 0xdf, 0xce, 0x37, 0xdf, 0x8c, 0x41, 0x8f, 0x30, 0x2d, 0x29, 0x51,
	0xae, 0x90, 0x5c, 0x73, 0x38, 0x16, 0x92, 0x27, 0x12, 0x67, 0x19, 0x65, 0x49, 0x90, 0xe2, 0xd0,
	0xc0, 0x29, 0x0e, 0x03, 0x1c, 0x45, 0x3c, 0x67, 0x5a, 0x0d, 0xfb, 0x57, 0x38, 0xa5, 0x31, 0xd6,
	0x5c, 0x16, 0x8c, 0xe1, 0xbd, 0x84, 0xf3, 0x24, 0x25, 0x1e, 0x16, 0xd4, 0xc3, 0x8c, 0x71, 0x8d,
	0x35, 0xe5, 0xac, 0x7c, 0x6f, 0xb8, 0x5f, 0x66, 0x6d, 0x14, 0xe6, 0x2f, 0x3c, 0x92, 0x09, 0xbd,
	0x2e, 0x93, 0xe3, 0x3f, 0x93, 0x9a, 0x66, 0x44, 0x69, 0x9c, 0x89, 0xb2, 0x60, 0x2f, 0x57, 0x44,
	0x06, 0x61, 0xca, 0x93, 0xea, 0xbd, 0xae, 0x41, 0xca, 0x60, 0xfa, 0xbe, 0x06, 0x1a, 0x27, 0x4c,
	0xcb, 0x35, 0xbc, 0x0b, 0xda, 0x66, 0x8e, 0x75, 0x40, 0x63, 0xe4, 0x4c, 0x9c, 0x59, 0xcf, 0x6f,
	0xd9, 0xf8, 0x59, 0x0c, 0x6f, 0x83, 0x86, 0xa6, 0x3a, 0x25, 0x68, 0x67, 0xe2, 0xcc, 0x3a, 0x7e,
	0x11, 0xc0, 0x09, 0xe8, 0xc6, 0x44, 0x45, 0x92, 0x0a, 0xa3, 0x16, 0xd5, 0x6c, 0xee, 0x26, 0x04,
	0x11, 0x68, 0x45, 0x9c, 0x69, 0xc2, 0x34, 0xaa, 0xdb, 0x6c, 0x15, 0x42, 0x08, 0xea, 0x29, 0x65,
	0x97, 0xa8, 0x61, 0x61, 0xfb, 0x1f, 0x1e, 0x83, 0x26, 0xce, 0xf5, 0x8a, 0x4b, 0xd4, 0x9c, 0x38,
	0xb3, 0xee, 0xfc, 0x81, 0xbb, 0xc5, 0x48, 0xf7, 0x42, 0x11, 0xe9, 0x97, 0x24, 0xb8, 0x0f, 0x3a,
	0x34, 0xc3, 0x09, 0x09, 0x72, 0x99, 0xa2, 0x96, 0x7d, 0xb7, 0x6d, 0x81, 0x0b, 0x99, 0xc2, 0x63,
	0xb0, 0x2b, 0xf2, 0x30, 0xa5, 0x6a, 0x45, 0xe2, 0x00, 0x6b, 0xd4, 0xb6, 0x1d, 0x86, 0x6e, 0xe1,
	0x9e, 0x5b, 0xb9, 0xe7, 0x9e, 0x57, 0xee, 0xf9, 0xdd, 0x9f, 0xf5, 0x4f, 0x35, 0x7c, 0x04, 0x40,
	0x2e, 0x62, 0xac, 0x0b, 0x72, 0x67, 0x2b, 0xb9, 0x53, 0x56, 0x5b, 0x6a, 0xdd, 0x98, 0x8f, 0xc0,
	0x3f, 0xce, 0xb4, 0x48, 0x79, 0xe2, 0x5b, 0xca, 0x34, 0x02, 0xf0, 0x94, 0x2a, 0x7d, 0x52, 0x5c,
	0x97, 0x4f, 0x5e, 0xe6, 0x44, 0x69, 0x78, 0x1f, 0x00, 0x61, 0xc6, 0xd4, 0xfc, 0x92, 0x30, 0xbb,
	0xa9, 0x9a, 0xdf, 0x31, 0xc8, 0xb9, 0x01, 0xa0, 0x0b, 0x6c, 0x10, 0x28, 0x7a, 0x5d, 0xec, 0xab,
	0xb1, 0x18, 0x6c, 0xbe, 0x8c, 0x7b, 0x7b, 0xdf, 0xab, 0x9f, 0x83, 0x88, 0xdf, 0x36, 0x35, 0x67,
	0xf4, 0x9a, 0x4c, 0x5f, 0x83, 0x5b, 0xbf, 0x35, 0x51, 0x82, 0x33, 0x45, 0xe0, 0x13, 0xd0, 0x2a,
	0xaf, 0x1a, 0x39, 0x93, 0xda, 0xac, 0x3b, 0x3f, 0xd8, 0xaa, 0xdc, 0x9e, 0x91, 0x5f, 0xd1, 0xe0,
	0x01, 0xe8, 0x33, 0xf2, 0x4a, 0x07, 0x37, 0xc4, 0xee, 0x58, 0xb1, 0x3d, 0x03, 0x2f, 0x2b, 0xc1,
	0xf3, 0x0f, 0x0e, 0xd8, 0xb5, 0xd4, 0x33, 0x22, 0xaf, 0x68, 0x44, 0xe0, 0x3b, 0x07, 0x0c, 0x8c,
	0xa4, 0xa5, 0x59, 0x40, 0x54, 0x0a, 0x83, 0x87, 0x5b, 0xfb, 0xff, 0xed, 0xd5, 0xf0, 0xe8, 0xff,
	0x48, 0xc5, 0xec, 0xd3, 0x3b, 0x6f, 0x3e, 0x7f, 0x7b, 0xbb, 0x33, 0x80, 0x7d, 0xaf, 0x9c, 0xc5,
	0xb3, 0xb7, 0x10, 0x2d, 0x16, 0x1f, 0x37, 0x23, 0xe7, 0xd3, 0x66, 0xe4, 0x7c, 0xdd, 0x8c, 0x9c,
	0xe7, 0x47, 0x09, 0xd5, 0xab, 0x3c, 0x74, 0x23, 0x9e, 0x79, 0xcb, 0x5f, 0x6d, 0x4e, 0x71, 0xe8,
	0x15, 0x5d, 0x1e, 0x56, 0x5d, 0xcc, 0x87, 0xfd, 0x18, 0x0b, 0x1a, 0x88, 0x30, 0x6c, 0xda, 0x73,
	0x39, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0x75, 0xdb, 0x11, 0xe0, 0x35, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EntryServiceClient is the client API for EntryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntryServiceClient interface {
	ListPublicEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error)
}

type entryServiceClient struct {
	cc *grpc.ClientConn
}

func NewEntryServiceClient(cc *grpc.ClientConn) EntryServiceClient {
	return &entryServiceClient{cc}
}

func (c *entryServiceClient) ListPublicEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error) {
	out := new(ListEntriesResponse)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.EntryService/ListPublicEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntryServiceServer is the server API for EntryService service.
type EntryServiceServer interface {
	ListPublicEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error)
}

func RegisterEntryServiceServer(s *grpc.Server, srv EntryServiceServer) {
	s.RegisterService(&_EntryService_serviceDesc, srv)
}

func _EntryService_ListPublicEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryServiceServer).ListPublicEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.EntryService/ListPublicEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryServiceServer).ListPublicEntries(ctx, req.(*ListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "programming_lab.prolab_accounts.EntryService",
	HandlerType: (*EntryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPublicEntries",
			Handler:    _EntryService_ListPublicEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entries.proto",
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.EntryId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntries(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntries(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntries(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntries(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Author != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.Author.Size()))
		n1, err := m.Author.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEntries(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if m.PublishedAt != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.PublishedAt.Size()))
		n2, err := m.PublishedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.UpdatedAt.Size()))
		n3, err := m.UpdatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Blog != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.Blog.Size()))
		n4, err := m.Blog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageToken != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.PageToken))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEntries(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NextPageToken != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEntries(dAtA, i, uint64(m.NextPageToken))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEntries(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntryId != 0 {
		n += 1 + sovEntries(uint64(m.EntryId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEntries(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntries(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEntries(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovEntries(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovEntries(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovEntries(uint64(l))
	}
	if m.PublishedAt != nil {
		l = m.PublishedAt.Size()
		n += 1 + l + sovEntries(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovEntries(uint64(l))
	}
	if m.Blog != nil {
		l = m.Blog.Size()
		n += 1 + l + sovEntries(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageToken != 0 {
		n += 1 + sovEntries(uint64(m.PageToken))
	}
	if m.PageSize != 0 {
		n += 1 + sovEntries(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListEntriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovEntries(uint64(l))
		}
	}
	if m.NextPageToken != 0 {
		n += 1 + sovEntries(uint64(m.NextPageToken))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEntries(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntries(x uint64) (n int) {
	return sovEntries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			m.EntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishedAt == nil {
				m.PublishedAt = &types.Timestamp{}
			}
			if err := m.PublishedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blog == nil {
				m.Blog = &Blog{}
			}
			if err := m.Blog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			m.PageToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageToken |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			m.NextPageToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPageToken |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntries(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntries
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEntries
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntries
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntries(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEntries
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntries = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntries   = fmt.Errorf("proto: integer overflow")
)
