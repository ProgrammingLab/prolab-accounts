// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: departments.proto

package api_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Department struct {
	DepartmentId         uint32   `protobuf:"varint,1,opt,name=department_id,json=departmentId,proto3" json:"department_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ShortName            string   `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Department) Reset()         { *m = Department{} }
func (m *Department) String() string { return proto.CompactTextString(m) }
func (*Department) ProtoMessage()    {}
func (*Department) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b244bf7e6be23c0, []int{0}
}
func (m *Department) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Department) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Department.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Department) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Department.Merge(m, src)
}
func (m *Department) XXX_Size() int {
	return m.Size()
}
func (m *Department) XXX_DiscardUnknown() {
	xxx_messageInfo_Department.DiscardUnknown(m)
}

var xxx_messageInfo_Department proto.InternalMessageInfo

func (m *Department) GetDepartmentId() uint32 {
	if m != nil {
		return m.DepartmentId
	}
	return 0
}

func (m *Department) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Department) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

type ListDepartmentsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDepartmentsRequest) Reset()         { *m = ListDepartmentsRequest{} }
func (m *ListDepartmentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDepartmentsRequest) ProtoMessage()    {}
func (*ListDepartmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b244bf7e6be23c0, []int{1}
}
func (m *ListDepartmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDepartmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDepartmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDepartmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDepartmentsRequest.Merge(m, src)
}
func (m *ListDepartmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDepartmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDepartmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDepartmentsRequest proto.InternalMessageInfo

type ListDepartmentsResponse struct {
	Departments          []*Department `protobuf:"bytes,1,rep,name=departments,proto3" json:"departments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListDepartmentsResponse) Reset()         { *m = ListDepartmentsResponse{} }
func (m *ListDepartmentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDepartmentsResponse) ProtoMessage()    {}
func (*ListDepartmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b244bf7e6be23c0, []int{2}
}
func (m *ListDepartmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDepartmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDepartmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDepartmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDepartmentsResponse.Merge(m, src)
}
func (m *ListDepartmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDepartmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDepartmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDepartmentsResponse proto.InternalMessageInfo

func (m *ListDepartmentsResponse) GetDepartments() []*Department {
	if m != nil {
		return m.Departments
	}
	return nil
}

type GetDepartmentRequest struct {
	DepartmentId         uint32   `protobuf:"varint,1,opt,name=department_id,json=departmentId,proto3" json:"department_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDepartmentRequest) Reset()         { *m = GetDepartmentRequest{} }
func (m *GetDepartmentRequest) String() string { return proto.CompactTextString(m) }
func (*GetDepartmentRequest) ProtoMessage()    {}
func (*GetDepartmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b244bf7e6be23c0, []int{3}
}
func (m *GetDepartmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDepartmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDepartmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDepartmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDepartmentRequest.Merge(m, src)
}
func (m *GetDepartmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDepartmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDepartmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDepartmentRequest proto.InternalMessageInfo

func (m *GetDepartmentRequest) GetDepartmentId() uint32 {
	if m != nil {
		return m.DepartmentId
	}
	return 0
}

func init() {
	proto.RegisterType((*Department)(nil), "programming_lab.prolab_accounts.Department")
	proto.RegisterType((*ListDepartmentsRequest)(nil), "programming_lab.prolab_accounts.ListDepartmentsRequest")
	proto.RegisterType((*ListDepartmentsResponse)(nil), "programming_lab.prolab_accounts.ListDepartmentsResponse")
	proto.RegisterType((*GetDepartmentRequest)(nil), "programming_lab.prolab_accounts.GetDepartmentRequest")
}

func init() { proto.RegisterFile("departments.proto", fileDescriptor_3b244bf7e6be23c0) }

var fileDescriptor_3b244bf7e6be23c0 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x18, 0x85, 0x99, 0xf6, 0x72, 0xa1, 0xd3, 0xf6, 0x5e, 0x3a, 0x14, 0x0d, 0xb1, 0xc6, 0x12, 0x5d,
	0x14, 0xc4, 0x04, 0xaa, 0xa2, 0xd0, 0x5d, 0x11, 0x44, 0xa8, 0x22, 0x71, 0xe7, 0x26, 0x4c, 0x92,
	0x31, 0x1d, 0x68, 0x66, 0xc6, 0xcc, 0x44, 0x10, 0x71, 0xe3, 0x2b, 0xb8, 0xd2, 0x27, 0x72, 0xe1,
	0x42, 0xf0, 0x05, 0xa4, 0xf8, 0x20, 0xd2, 0xb4, 0x9a, 0x54, 0x0b, 0xb5, 0xbb, 0xe4, 0x3f, 0x9c,
	0xf9, 0xce, 0x7f, 0xf8, 0x61, 0x2d, 0x20, 0x02, 0xc7, 0x2a, 0x22, 0x4c, 0x49, 0x4b, 0xc4, 0x5c,
	0x71, 0xb4, 0x26, 0x62, 0x1e, 0xc6, 0x38, 0x8a, 0x28, 0x0b, 0xdd, 0x01, 0xf6, 0x46, 0xe3, 0x01,
	0xf6, 0x5c, 0xec, 0xfb, 0x3c, 0x61, 0x4a, 0xea, 0x8d, 0x90, 0xf3, 0x70, 0x40, 0x6c, 0x2c, 0xa8,
	0x8d, 0x19, 0xe3, 0x0a, 0x2b, 0xca, 0xd9, 0xc4, 0xae, 0xaf, 0x4c, 0xd4, 0xf4, 0xcf, 0x4b, 0x2e,
	0x6c, 0x12, 0x09, 0x75, 0x3d, 0x16, 0xcd, 0x00, 0xc2, 0x83, 0x2f, 0x20, 0x5a, 0x87, 0xd5, 0x0c,
	0xef, 0xd2, 0x40, 0x03, 0x4d, 0xd0, 0xaa, 0x3a, 0x95, 0x6c, 0x78, 0x14, 0x20, 0x04, 0xff, 0x30,
	0x1c, 0x11, 0xad, 0xd0, 0x04, 0xad, 0x92, 0x93, 0x7e, 0xa3, 0x55, 0x08, 0x65, 0x9f, 0xc7, 0xca,
	0x4d, 0x95, 0x62, 0xaa, 0x94, 0xd2, 0xc9, 0x09, 0x8e, 0x88, 0xa9, 0xc1, 0xa5, 0x1e, 0x95, 0x2a,
	0x23, 0x49, 0x87, 0x5c, 0x26, 0x44, 0x2a, 0xb3, 0x0f, 0x97, 0x7f, 0x28, 0x52, 0x70, 0x26, 0x09,
	0x3a, 0x86, 0xe5, 0x5c, 0x17, 0x1a, 0x68, 0x16, 0x5b, 0xe5, 0xf6, 0xa6, 0x35, 0xa7, 0x0c, 0x2b,
	0x7b, 0xca, 0xc9, 0xfb, 0xcd, 0x0e, 0xac, 0x1f, 0x92, 0x1c, 0x68, 0x92, 0xe0, 0x57, 0x3b, 0xb7,
	0x9f, 0x0b, 0xb0, 0x96, 0x59, 0xcf, 0x48, 0x7c, 0x45, 0x7d, 0x82, 0x1e, 0x01, 0xfc, 0xff, 0x2d,
	0x3d, 0xda, 0x9b, 0x1b, 0x70, 0x76, 0x13, 0xfa, 0xfe, 0xe2, 0xc6, 0x71, 0x51, 0x66, 0xfd, 0xee,
	0xf5, 0xfd, 0xbe, 0xf0, 0x0f, 0x55, 0xec, 0xdc, 0xbe, 0xe8, 0x01, 0xc0, 0xea, 0xd4, 0xc2, 0x68,
	0x77, 0x2e, 0x61, 0x56, 0x41, 0xfa, 0x22, 0x95, 0x9b, 0x1b, 0x69, 0x16, 0x03, 0x35, 0xf2, 0x59,
	0xec, 0x9b, 0xa9, 0x86, 0x6f, 0xbb, 0xdd, 0xa7, 0xa1, 0x01, 0x5e, 0x86, 0x06, 0x78, 0x1b, 0x1a,
	0xe0, 0x7c, 0x27, 0xa4, 0xaa, 0x9f, 0x78, 0x96, 0xcf, 0x23, 0xfb, 0x34, 0x43, 0xf5, 0xb0, 0x67,
	0x8f, 0x49, 0x5b, 0x9f, 0xa4, 0xd1, 0x85, 0x77, 0xb0, 0xa0, 0xae, 0xf0, 0xbc, 0xbf, 0xe9, 0x01,
	0x6f, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xe3, 0xab, 0x2b, 0x31, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DepartmentServiceClient is the client API for DepartmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepartmentServiceClient interface {
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
}

type departmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewDepartmentServiceClient(cc *grpc.ClientConn) DepartmentServiceClient {
	return &departmentServiceClient{cc}
}

func (c *departmentServiceClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	out := new(ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.DepartmentService/ListDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.DepartmentService/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServiceServer is the server API for DepartmentService service.
type DepartmentServiceServer interface {
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	GetDepartment(context.Context, *GetDepartmentRequest) (*Department, error)
}

func RegisterDepartmentServiceServer(s *grpc.Server, srv DepartmentServiceServer) {
	s.RegisterService(&_DepartmentService_serviceDesc, srv)
}

func _DepartmentService_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.DepartmentService/ListDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.DepartmentService/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DepartmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "programming_lab.prolab_accounts.DepartmentService",
	HandlerType: (*DepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDepartments",
			Handler:    _DepartmentService_ListDepartments_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _DepartmentService_GetDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "departments.proto",
}

func (m *Department) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Department) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DepartmentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepartments(dAtA, i, uint64(m.DepartmentId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDepartments(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDepartments(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListDepartmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDepartmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListDepartmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDepartmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Departments) > 0 {
		for _, msg := range m.Departments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDepartments(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDepartmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDepartmentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DepartmentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepartments(dAtA, i, uint64(m.DepartmentId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDepartments(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Department) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepartmentId != 0 {
		n += 1 + sovDepartments(uint64(m.DepartmentId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDepartments(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovDepartments(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDepartmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDepartmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Departments) > 0 {
		for _, e := range m.Departments {
			l = e.Size()
			n += 1 + l + sovDepartments(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDepartmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepartmentId != 0 {
		n += 1 + sovDepartments(uint64(m.DepartmentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDepartments(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDepartments(x uint64) (n int) {
	return sovDepartments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Department) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Department: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Department: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			m.DepartmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepartmentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDepartmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDepartmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDepartmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDepartments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDepartmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDepartmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDepartmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Departments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Departments = append(m.Departments, &Department{})
			if err := m.Departments[len(m.Departments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDepartmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDepartmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDepartmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			m.DepartmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepartmentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepartments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDepartments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDepartments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDepartments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepartments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepartments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDepartments
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDepartments
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDepartments
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDepartments(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDepartments
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDepartments = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDepartments   = fmt.Errorf("proto: integer overflow")
)
