// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: password_resets.proto

package api_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PasswordReset struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordReset) Reset()         { *m = PasswordReset{} }
func (m *PasswordReset) String() string { return proto.CompactTextString(m) }
func (*PasswordReset) ProtoMessage()    {}
func (*PasswordReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9d5c2a03d1ba1, []int{0}
}
func (m *PasswordReset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordReset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasswordReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordReset.Merge(m, src)
}
func (m *PasswordReset) XXX_Size() int {
	return m.Size()
}
func (m *PasswordReset) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordReset.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordReset proto.InternalMessageInfo

func (m *PasswordReset) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PasswordReset) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type GetPasswordResetRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPasswordResetRequest) Reset()         { *m = GetPasswordResetRequest{} }
func (m *GetPasswordResetRequest) String() string { return proto.CompactTextString(m) }
func (*GetPasswordResetRequest) ProtoMessage()    {}
func (*GetPasswordResetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9d5c2a03d1ba1, []int{1}
}
func (m *GetPasswordResetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPasswordResetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPasswordResetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPasswordResetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPasswordResetRequest.Merge(m, src)
}
func (m *GetPasswordResetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPasswordResetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPasswordResetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPasswordResetRequest proto.InternalMessageInfo

func (m *GetPasswordResetRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetPasswordResetRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type CreatePasswordResetRequest struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePasswordResetRequest) Reset()         { *m = CreatePasswordResetRequest{} }
func (m *CreatePasswordResetRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePasswordResetRequest) ProtoMessage()    {}
func (*CreatePasswordResetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9d5c2a03d1ba1, []int{2}
}
func (m *CreatePasswordResetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePasswordResetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePasswordResetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePasswordResetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePasswordResetRequest.Merge(m, src)
}
func (m *CreatePasswordResetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePasswordResetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePasswordResetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePasswordResetRequest proto.InternalMessageInfo

func (m *CreatePasswordResetRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UpdatePasswordRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	NewPassword          string   `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePasswordRequest) Reset()         { *m = UpdatePasswordRequest{} }
func (m *UpdatePasswordRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePasswordRequest) ProtoMessage()    {}
func (*UpdatePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9d5c2a03d1ba1, []int{3}
}
func (m *UpdatePasswordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePasswordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePasswordRequest.Merge(m, src)
}
func (m *UpdatePasswordRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePasswordRequest proto.InternalMessageInfo

func (m *UpdatePasswordRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UpdatePasswordRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdatePasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func init() {
	proto.RegisterType((*PasswordReset)(nil), "programming_lab.prolab_accounts.PasswordReset")
	proto.RegisterType((*GetPasswordResetRequest)(nil), "programming_lab.prolab_accounts.GetPasswordResetRequest")
	proto.RegisterType((*CreatePasswordResetRequest)(nil), "programming_lab.prolab_accounts.CreatePasswordResetRequest")
	proto.RegisterType((*UpdatePasswordRequest)(nil), "programming_lab.prolab_accounts.UpdatePasswordRequest")
}

func init() { proto.RegisterFile("password_resets.proto", fileDescriptor_61e9d5c2a03d1ba1) }

var fileDescriptor_61e9d5c2a03d1ba1 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x65, 0x5a, 0xde, 0x83, 0x37, 0xef, 0x83, 0x32, 0xaf, 0xd5, 0x90, 0x6a, 0xad, 0x71, 0x23,
	0x05, 0x27, 0x50, 0x45, 0xa4, 0xdd, 0x55, 0x8a, 0x1b, 0x17, 0xa5, 0xe2, 0xc6, 0x4d, 0x98, 0xa4,
	0xd3, 0x18, 0x4c, 0x66, 0xc6, 0x64, 0x62, 0x11, 0x71, 0x23, 0xf8, 0x0b, 0xdc, 0xeb, 0xdf, 0x71,
	0x29, 0xf8, 0x07, 0xb4, 0xf8, 0x43, 0x24, 0x49, 0x83, 0xa6, 0x34, 0x84, 0x2e, 0xef, 0xbd, 0x9c,
	0x7b, 0xce, 0xdc, 0x73, 0x06, 0xd6, 0x04, 0x09, 0x82, 0x09, 0xf7, 0x47, 0x86, 0x4f, 0x03, 0x2a,
	0x03, 0x2c, 0x7c, 0x2e, 0x39, 0xda, 0x10, 0x3e, 0xb7, 0x7d, 0xe2, 0x79, 0x0e, 0xb3, 0x0d, 0x97,
	0x98, 0x51, 0xdb, 0x25, 0xa6, 0x41, 0x2c, 0x8b, 0x87, 0x4c, 0x06, 0xea, 0x9a, 0xcd, 0xb9, 0xed,
	0x52, 0x9d, 0x08, 0x47, 0x27, 0x8c, 0x71, 0x49, 0xa4, 0xc3, 0xd9, 0x0c, 0xae, 0xd6, 0x67, 0xd3,
	0xb8, 0x32, 0xc3, 0xb1, 0x4e, 0x3d, 0x21, 0xaf, 0x93, 0xa1, 0xd6, 0x85, 0x7f, 0x07, 0x33, 0xd2,
	0x61, 0xc4, 0x89, 0xaa, 0xf0, 0x87, 0xe4, 0x17, 0x94, 0x29, 0xa0, 0x09, 0xb6, 0x7f, 0x0d, 0x93,
	0x22, 0xea, 0x52, 0x8f, 0x38, 0xae, 0x52, 0x4a, 0xba, 0x71, 0xa1, 0xf5, 0xe1, 0xea, 0x11, 0x95,
	0x19, 0xfc, 0x90, 0x5e, 0x86, 0x34, 0x58, 0x6e, 0x4d, 0x1b, 0xaa, 0x87, 0x3e, 0x25, 0x92, 0xe6,
	0x6d, 0x4a, 0x30, 0xe0, 0x3b, 0x66, 0x0c, 0x6b, 0xa7, 0x62, 0x94, 0xc1, 0x2c, 0x4d, 0x8c, 0x36,
	0xe1, 0x1f, 0x46, 0x27, 0x46, 0x7a, 0x75, 0xa5, 0x1c, 0x0f, 0x7f, 0x33, 0x3a, 0x49, 0xb7, 0xb6,
	0xdf, 0xcb, 0xb0, 0x9a, 0x91, 0x75, 0x42, 0xfd, 0x2b, 0xc7, 0xa2, 0xe8, 0x11, 0xc0, 0xca, 0xfc,
	0xe3, 0xd1, 0x01, 0x2e, 0xb0, 0x0a, 0xe7, 0xdc, 0x4b, 0xc5, 0x85, 0xc8, 0x0c, 0x4c, 0x6b, 0xde,
	0xbd, 0x7e, 0x3c, 0x94, 0x54, 0xa4, 0xe8, 0x73, 0x99, 0xd1, 0x6f, 0xe2, 0x17, 0xdf, 0xa2, 0x27,
	0x00, 0xff, 0x2f, 0x38, 0x2b, 0xea, 0x16, 0x32, 0xe5, 0x9b, 0xb1, 0xb4, 0xcc, 0x7a, 0x2c, 0xb3,
	0xa6, 0x55, 0xe6, 0x65, 0x76, 0x40, 0x0b, 0xdd, 0x03, 0xf8, 0x2f, 0x6b, 0x22, 0xda, 0x2f, 0xdc,
	0xbf, 0xd0, 0x75, 0x75, 0x05, 0x27, 0x21, 0xc7, 0x69, 0xc8, 0x71, 0x3f, 0x0a, 0xb9, 0xb6, 0x15,
	0xf3, 0xaf, 0xb7, 0x73, 0xcf, 0xd4, 0x01, 0xad, 0x5e, 0xef, 0x79, 0xda, 0x00, 0x2f, 0xd3, 0x06,
	0x78, 0x9b, 0x36, 0xc0, 0xd9, 0x9e, 0xed, 0xc8, 0xf3, 0xd0, 0xc4, 0x16, 0xf7, 0xf4, 0xc1, 0x97,
	0x98, 0x63, 0x62, 0xea, 0x89, 0x96, 0x9d, 0x54, 0x4b, 0xf4, 0xdf, 0xba, 0x44, 0x38, 0x86, 0x30,
	0xcd, 0x9f, 0x31, 0xf1, 0xee, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0xd1, 0x85, 0x6c, 0xc3,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PasswordResetServiceClient is the client API for PasswordResetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PasswordResetServiceClient interface {
	GetPasswordReset(ctx context.Context, in *GetPasswordResetRequest, opts ...grpc.CallOption) (*PasswordReset, error)
	CreatePasswordReset(ctx context.Context, in *CreatePasswordResetRequest, opts ...grpc.CallOption) (*PasswordReset, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type passwordResetServiceClient struct {
	cc *grpc.ClientConn
}

func NewPasswordResetServiceClient(cc *grpc.ClientConn) PasswordResetServiceClient {
	return &passwordResetServiceClient{cc}
}

func (c *passwordResetServiceClient) GetPasswordReset(ctx context.Context, in *GetPasswordResetRequest, opts ...grpc.CallOption) (*PasswordReset, error) {
	out := new(PasswordReset)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.PasswordResetService/GetPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordResetServiceClient) CreatePasswordReset(ctx context.Context, in *CreatePasswordResetRequest, opts ...grpc.CallOption) (*PasswordReset, error) {
	out := new(PasswordReset)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.PasswordResetService/CreatePasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordResetServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.PasswordResetService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordResetServiceServer is the server API for PasswordResetService service.
type PasswordResetServiceServer interface {
	GetPasswordReset(context.Context, *GetPasswordResetRequest) (*PasswordReset, error)
	CreatePasswordReset(context.Context, *CreatePasswordResetRequest) (*PasswordReset, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*empty.Empty, error)
}

func RegisterPasswordResetServiceServer(s *grpc.Server, srv PasswordResetServiceServer) {
	s.RegisterService(&_PasswordResetService_serviceDesc, srv)
}

func _PasswordResetService_GetPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordResetServiceServer).GetPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.PasswordResetService/GetPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordResetServiceServer).GetPasswordReset(ctx, req.(*GetPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordResetService_CreatePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordResetServiceServer).CreatePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.PasswordResetService/CreatePasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordResetServiceServer).CreatePasswordReset(ctx, req.(*CreatePasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordResetService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordResetServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.PasswordResetService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordResetServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PasswordResetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "programming_lab.prolab_accounts.PasswordResetService",
	HandlerType: (*PasswordResetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPasswordReset",
			Handler:    _PasswordResetService_GetPasswordReset_Handler,
		},
		{
			MethodName: "CreatePasswordReset",
			Handler:    _PasswordResetService_CreatePasswordReset_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _PasswordResetService_UpdatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "password_resets.proto",
}

func (m *PasswordReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordReset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPasswordResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPasswordResetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreatePasswordResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePasswordResetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.NewPassword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPasswordResets(dAtA, i, uint64(len(m.NewPassword)))
		i += copy(dAtA[i:], m.NewPassword)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPasswordResets(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PasswordReset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPasswordResetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePasswordResetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePasswordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovPasswordResets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPasswordResets(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPasswordResets(x uint64) (n int) {
	return sovPasswordResets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PasswordReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPasswordResets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPasswordResets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPasswordResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPasswordResets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPasswordResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPasswordResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPasswordResets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePasswordResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPasswordResets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePasswordResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePasswordResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPasswordResets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPasswordResets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPasswordResets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPasswordResets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPasswordResets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPasswordResets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPasswordResets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPasswordResets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPasswordResets
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPasswordResets
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPasswordResets
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPasswordResets(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPasswordResets
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPasswordResets = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPasswordResets   = fmt.Errorf("proto: integer overflow")
)
