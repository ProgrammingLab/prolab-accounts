// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oauth.proto

package api_pb

import (
	context "context"
	fmt "fmt"
	_type "github.com/ProgrammingLab/prolab-accounts/api/type"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StartOAuthLoginRequest struct {
	LoginChallenge       string   `protobuf:"bytes,1,opt,name=login_challenge,json=loginChallenge,proto3" json:"login_challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartOAuthLoginRequest) Reset()         { *m = StartOAuthLoginRequest{} }
func (m *StartOAuthLoginRequest) String() string { return proto.CompactTextString(m) }
func (*StartOAuthLoginRequest) ProtoMessage()    {}
func (*StartOAuthLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{0}
}
func (m *StartOAuthLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartOAuthLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartOAuthLoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartOAuthLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartOAuthLoginRequest.Merge(m, src)
}
func (m *StartOAuthLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartOAuthLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartOAuthLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartOAuthLoginRequest proto.InternalMessageInfo

func (m *StartOAuthLoginRequest) GetLoginChallenge() string {
	if m != nil {
		return m.LoginChallenge
	}
	return ""
}

type StartOAuthLoginResponse struct {
	Skip                 bool     `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	RedirectUrl          string   `protobuf:"bytes,2,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartOAuthLoginResponse) Reset()         { *m = StartOAuthLoginResponse{} }
func (m *StartOAuthLoginResponse) String() string { return proto.CompactTextString(m) }
func (*StartOAuthLoginResponse) ProtoMessage()    {}
func (*StartOAuthLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{1}
}
func (m *StartOAuthLoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartOAuthLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartOAuthLoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartOAuthLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartOAuthLoginResponse.Merge(m, src)
}
func (m *StartOAuthLoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartOAuthLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartOAuthLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartOAuthLoginResponse proto.InternalMessageInfo

func (m *StartOAuthLoginResponse) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *StartOAuthLoginResponse) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

type OAuthLoginRequest struct {
	LoginChallenge       string   `protobuf:"bytes,1,opt,name=login_challenge,json=loginChallenge,proto3" json:"login_challenge,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Remember             bool     `protobuf:"varint,4,opt,name=remember,proto3" json:"remember,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthLoginRequest) Reset()         { *m = OAuthLoginRequest{} }
func (m *OAuthLoginRequest) String() string { return proto.CompactTextString(m) }
func (*OAuthLoginRequest) ProtoMessage()    {}
func (*OAuthLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{2}
}
func (m *OAuthLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuthLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuthLoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuthLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthLoginRequest.Merge(m, src)
}
func (m *OAuthLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *OAuthLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthLoginRequest proto.InternalMessageInfo

func (m *OAuthLoginRequest) GetLoginChallenge() string {
	if m != nil {
		return m.LoginChallenge
	}
	return ""
}

func (m *OAuthLoginRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OAuthLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *OAuthLoginRequest) GetRemember() bool {
	if m != nil {
		return m.Remember
	}
	return false
}

type OAuthLoginResponse struct {
	RedirectUrl          string   `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthLoginResponse) Reset()         { *m = OAuthLoginResponse{} }
func (m *OAuthLoginResponse) String() string { return proto.CompactTextString(m) }
func (*OAuthLoginResponse) ProtoMessage()    {}
func (*OAuthLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{3}
}
func (m *OAuthLoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuthLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuthLoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuthLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthLoginResponse.Merge(m, src)
}
func (m *OAuthLoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *OAuthLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthLoginResponse proto.InternalMessageInfo

func (m *OAuthLoginResponse) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

type StartOAuthConsentRequest struct {
	ConsentChallenge     string   `protobuf:"bytes,1,opt,name=consent_challenge,json=consentChallenge,proto3" json:"consent_challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartOAuthConsentRequest) Reset()         { *m = StartOAuthConsentRequest{} }
func (m *StartOAuthConsentRequest) String() string { return proto.CompactTextString(m) }
func (*StartOAuthConsentRequest) ProtoMessage()    {}
func (*StartOAuthConsentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{4}
}
func (m *StartOAuthConsentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartOAuthConsentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartOAuthConsentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartOAuthConsentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartOAuthConsentRequest.Merge(m, src)
}
func (m *StartOAuthConsentRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartOAuthConsentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartOAuthConsentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartOAuthConsentRequest proto.InternalMessageInfo

func (m *StartOAuthConsentRequest) GetConsentChallenge() string {
	if m != nil {
		return m.ConsentChallenge
	}
	return ""
}

type StartOAuthConsentResponse struct {
	Skip                 bool          `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	RedirectUrl          string        `protobuf:"bytes,2,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	RequestedScopes      []string      `protobuf:"bytes,3,rep,name=requested_scopes,json=requestedScopes,proto3" json:"requested_scopes,omitempty"`
	Client               *_type.Client `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StartOAuthConsentResponse) Reset()         { *m = StartOAuthConsentResponse{} }
func (m *StartOAuthConsentResponse) String() string { return proto.CompactTextString(m) }
func (*StartOAuthConsentResponse) ProtoMessage()    {}
func (*StartOAuthConsentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{5}
}
func (m *StartOAuthConsentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartOAuthConsentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartOAuthConsentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartOAuthConsentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartOAuthConsentResponse.Merge(m, src)
}
func (m *StartOAuthConsentResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartOAuthConsentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartOAuthConsentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartOAuthConsentResponse proto.InternalMessageInfo

func (m *StartOAuthConsentResponse) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *StartOAuthConsentResponse) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func (m *StartOAuthConsentResponse) GetRequestedScopes() []string {
	if m != nil {
		return m.RequestedScopes
	}
	return nil
}

func (m *StartOAuthConsentResponse) GetClient() *_type.Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type OAuthConsentRequest struct {
	ConsentChallenge     string   `protobuf:"bytes,1,opt,name=consent_challenge,json=consentChallenge,proto3" json:"consent_challenge,omitempty"`
	Accept               bool     `protobuf:"varint,2,opt,name=accept,proto3" json:"accept,omitempty"`
	GrantScopes          []string `protobuf:"bytes,3,rep,name=grant_scopes,json=grantScopes,proto3" json:"grant_scopes,omitempty"`
	Remember             bool     `protobuf:"varint,4,opt,name=remember,proto3" json:"remember,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthConsentRequest) Reset()         { *m = OAuthConsentRequest{} }
func (m *OAuthConsentRequest) String() string { return proto.CompactTextString(m) }
func (*OAuthConsentRequest) ProtoMessage()    {}
func (*OAuthConsentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{6}
}
func (m *OAuthConsentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuthConsentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuthConsentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuthConsentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthConsentRequest.Merge(m, src)
}
func (m *OAuthConsentRequest) XXX_Size() int {
	return m.Size()
}
func (m *OAuthConsentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthConsentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthConsentRequest proto.InternalMessageInfo

func (m *OAuthConsentRequest) GetConsentChallenge() string {
	if m != nil {
		return m.ConsentChallenge
	}
	return ""
}

func (m *OAuthConsentRequest) GetAccept() bool {
	if m != nil {
		return m.Accept
	}
	return false
}

func (m *OAuthConsentRequest) GetGrantScopes() []string {
	if m != nil {
		return m.GrantScopes
	}
	return nil
}

func (m *OAuthConsentRequest) GetRemember() bool {
	if m != nil {
		return m.Remember
	}
	return false
}

type OAuthConsentResponse struct {
	RedirectUrl          string   `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthConsentResponse) Reset()         { *m = OAuthConsentResponse{} }
func (m *OAuthConsentResponse) String() string { return proto.CompactTextString(m) }
func (*OAuthConsentResponse) ProtoMessage()    {}
func (*OAuthConsentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{7}
}
func (m *OAuthConsentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuthConsentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuthConsentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuthConsentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthConsentResponse.Merge(m, src)
}
func (m *OAuthConsentResponse) XXX_Size() int {
	return m.Size()
}
func (m *OAuthConsentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthConsentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthConsentResponse proto.InternalMessageInfo

func (m *OAuthConsentResponse) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*StartOAuthLoginRequest)(nil), "programming_lab.prolab_accounts.StartOAuthLoginRequest")
	proto.RegisterType((*StartOAuthLoginResponse)(nil), "programming_lab.prolab_accounts.StartOAuthLoginResponse")
	proto.RegisterType((*OAuthLoginRequest)(nil), "programming_lab.prolab_accounts.OAuthLoginRequest")
	proto.RegisterType((*OAuthLoginResponse)(nil), "programming_lab.prolab_accounts.OAuthLoginResponse")
	proto.RegisterType((*StartOAuthConsentRequest)(nil), "programming_lab.prolab_accounts.StartOAuthConsentRequest")
	proto.RegisterType((*StartOAuthConsentResponse)(nil), "programming_lab.prolab_accounts.StartOAuthConsentResponse")
	proto.RegisterType((*OAuthConsentRequest)(nil), "programming_lab.prolab_accounts.OAuthConsentRequest")
	proto.RegisterType((*OAuthConsentResponse)(nil), "programming_lab.prolab_accounts.OAuthConsentResponse")
}

func init() { proto.RegisterFile("oauth.proto", fileDescriptor_7ce0b12f599e9f07) }

var fileDescriptor_7ce0b12f599e9f07 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0x96, 0xd7, 0xaa, 0xea, 0xdc, 0xaa, 0x7f, 0xbc, 0xa9, 0xcb, 0xfa, 0xfb, 0xa9, 0x8c, 0x5c,
	0x18, 0x03, 0x1a, 0xa9, 0x1b, 0x1a, 0x2b, 0xa7, 0xad, 0x48, 0x5c, 0x26, 0x31, 0xa5, 0xe2, 0xc2,
	0x25, 0x72, 0x52, 0x93, 0x46, 0x24, 0xb6, 0x71, 0x1c, 0xd0, 0xae, 0x9c, 0x38, 0x71, 0x41, 0x42,
	0x82, 0x23, 0x5f, 0x85, 0x0b, 0x47, 0x24, 0xbe, 0x00, 0xaa, 0xf8, 0x14, 0x9c, 0x50, 0x1c, 0xb7,
	0xa5, 0x7f, 0x44, 0xe9, 0x76, 0xcb, 0xfb, 0x58, 0xcf, 0xeb, 0xe7, 0x79, 0xfc, 0x3a, 0x86, 0x25,
	0x86, 0x13, 0x39, 0x6c, 0x73, 0xc1, 0x24, 0x43, 0x37, 0xb8, 0x60, 0xbe, 0xc0, 0x51, 0x14, 0x50,
	0xdf, 0x09, 0xb1, 0x9b, 0xc2, 0x21, 0x76, 0x1d, 0xec, 0x79, 0x2c, 0xa1, 0x32, 0x6e, 0xfe, 0xef,
	0x33, 0xe6, 0x87, 0xc4, 0xc2, 0x3c, 0xb0, 0x30, 0xa5, 0x4c, 0x62, 0x19, 0x30, 0x1a, 0x67, 0xf4,
	0xe6, 0x7f, 0x7a, 0x55, 0x55, 0x6e, 0xf2, 0xdc, 0x22, 0x11, 0x97, 0x97, 0x7a, 0xb1, 0x2e, 0x2f,
	0x39, 0xb1, 0xbc, 0x30, 0x20, 0x54, 0x66, 0x90, 0x79, 0x0a, 0x1b, 0x7d, 0x89, 0x85, 0x7c, 0x72,
	0x9a, 0xc8, 0xe1, 0x39, 0xf3, 0x03, 0x6a, 0x93, 0x97, 0x09, 0x89, 0x25, 0xba, 0x05, 0xab, 0x61,
	0x5a, 0x3b, 0xde, 0x10, 0x87, 0x21, 0xa1, 0x3e, 0x31, 0xc0, 0x1e, 0xd8, 0xdf, 0xb4, 0x2b, 0x0a,
	0xee, 0x8d, 0x51, 0xf3, 0x02, 0xee, 0x2c, 0xb4, 0x88, 0x39, 0xa3, 0x31, 0x41, 0x08, 0xe6, 0xe3,
	0x17, 0x01, 0x57, 0xc4, 0xa2, 0xad, 0xbe, 0xd1, 0x4d, 0x58, 0x16, 0x64, 0x10, 0x08, 0xe2, 0x49,
	0x27, 0x11, 0xa1, 0xb1, 0xa1, 0x9a, 0x96, 0xc6, 0xd8, 0x53, 0x11, 0x9a, 0x6f, 0x01, 0xac, 0x5f,
	0x5d, 0x50, 0xba, 0x2b, 0xc5, 0x11, 0xd1, 0x9d, 0xd5, 0x37, 0x6a, 0xc2, 0x22, 0xc7, 0x71, 0xfc,
	0x9a, 0x89, 0x81, 0x91, 0x53, 0xf8, 0xa4, 0x4e, 0xd7, 0x04, 0x89, 0x48, 0xe4, 0x12, 0x61, 0xe4,
	0x95, 0xd2, 0x49, 0x6d, 0x1e, 0x43, 0xb4, 0xc4, 0xd7, 0xbc, 0x07, 0xb0, 0xe8, 0xe1, 0x31, 0x34,
	0xa6, 0xa9, 0xf4, 0x52, 0x16, 0x95, 0x63, 0x27, 0x77, 0x60, 0xdd, 0xcb, 0x90, 0x05, 0x2f, 0x35,
	0xbd, 0x30, 0x8d, 0xf7, 0x0b, 0x80, 0xbb, 0x4b, 0x3a, 0x5d, 0x2b, 0x61, 0x74, 0x1b, 0xd6, 0x44,
	0x26, 0x86, 0x0c, 0x9c, 0xd8, 0x63, 0x9c, 0xc4, 0x46, 0x6e, 0x2f, 0xb7, 0xbf, 0x69, 0x57, 0x27,
	0x78, 0x5f, 0xc1, 0xe8, 0x11, 0x2c, 0x64, 0x13, 0xa3, 0xb2, 0x29, 0x75, 0xee, 0xb6, 0x57, 0x4c,
	0x68, 0x3b, 0x9d, 0xb2, 0x76, 0x4f, 0x71, 0x6c, 0xcd, 0x35, 0x3f, 0x02, 0xb8, 0x75, 0xdd, 0x28,
	0x50, 0x03, 0x16, 0xb0, 0xe7, 0x11, 0x2e, 0x95, 0xa5, 0xa2, 0xad, 0xab, 0xd4, 0xb0, 0x2f, 0x30,
	0x95, 0xb3, 0x4e, 0x4a, 0x0a, 0xd3, 0x2e, 0xfe, 0x76, 0xc6, 0x27, 0x70, 0x7b, 0x69, 0xb6, 0xab,
	0x4f, 0xb9, 0xf3, 0x2b, 0x0f, 0xcb, 0x8a, 0xdb, 0x27, 0xe2, 0x55, 0xe0, 0x11, 0xf4, 0x09, 0xc0,
	0xea, 0xdc, 0x6d, 0x40, 0xc7, 0x2b, 0x13, 0x5b, 0x7e, 0x05, 0x9b, 0x0f, 0xd6, 0x27, 0x66, 0xd2,
	0xcd, 0xed, 0x37, 0xdf, 0x7f, 0xbe, 0xdf, 0xa8, 0xa0, 0xb2, 0xa5, 0xfe, 0x2d, 0x96, 0xba, 0x21,
	0xe8, 0x1d, 0x80, 0xf0, 0x0f, 0x5d, 0x9d, 0x95, 0xed, 0x17, 0x25, 0x1d, 0xae, 0xc5, 0xd1, 0x6a,
	0x76, 0x94, 0x9a, 0xba, 0x39, 0xa3, 0xa6, 0x0b, 0x0e, 0xd0, 0x67, 0x00, 0xeb, 0x0b, 0xb3, 0x8d,
	0x4e, 0xd6, 0xb0, 0x3d, 0x3b, 0x4e, 0xcd, 0xee, 0x55, 0xa8, 0x5a, 0x65, 0x43, 0xa9, 0xac, 0xa1,
	0x8a, 0x56, 0xa9, 0xc7, 0x0f, 0x7d, 0x00, 0xfa, 0x8c, 0xc7, 0xfa, 0x8e, 0xfe, 0x2d, 0x83, 0x39,
	0x69, 0xf7, 0xd7, 0x64, 0x69, 0x55, 0xbb, 0x4a, 0xd5, 0x96, 0x39, 0xa7, 0xaa, 0x0b, 0x0e, 0xce,
	0xce, 0xbe, 0x8e, 0x5a, 0xe0, 0xdb, 0xa8, 0x05, 0x7e, 0x8c, 0x5a, 0xe0, 0xd9, 0x91, 0x1f, 0xc8,
	0x61, 0xe2, 0xb6, 0x3d, 0x16, 0x59, 0x17, 0xd3, 0x9d, 0xce, 0xb1, 0x6b, 0x65, 0x1b, 0xdd, 0x1b,
	0x6f, 0x94, 0x3e, 0x1d, 0x0f, 0x31, 0x0f, 0x1c, 0xee, 0xba, 0x05, 0xf5, 0x0c, 0x1c, 0xfe, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x5c, 0x60, 0x90, 0x1a, 0x84, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OAuthServiceClient is the client API for OAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OAuthServiceClient interface {
	StartOAuthLogin(ctx context.Context, in *StartOAuthLoginRequest, opts ...grpc.CallOption) (*StartOAuthLoginResponse, error)
	OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginResponse, error)
	StartOAuthConsent(ctx context.Context, in *StartOAuthConsentRequest, opts ...grpc.CallOption) (*StartOAuthConsentResponse, error)
	OAuthConsent(ctx context.Context, in *OAuthConsentRequest, opts ...grpc.CallOption) (*OAuthConsentResponse, error)
}

type oAuthServiceClient struct {
	cc *grpc.ClientConn
}

func NewOAuthServiceClient(cc *grpc.ClientConn) OAuthServiceClient {
	return &oAuthServiceClient{cc}
}

func (c *oAuthServiceClient) StartOAuthLogin(ctx context.Context, in *StartOAuthLoginRequest, opts ...grpc.CallOption) (*StartOAuthLoginResponse, error) {
	out := new(StartOAuthLoginResponse)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.OAuthService/StartOAuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginResponse, error) {
	out := new(OAuthLoginResponse)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.OAuthService/OAuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) StartOAuthConsent(ctx context.Context, in *StartOAuthConsentRequest, opts ...grpc.CallOption) (*StartOAuthConsentResponse, error) {
	out := new(StartOAuthConsentResponse)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.OAuthService/StartOAuthConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) OAuthConsent(ctx context.Context, in *OAuthConsentRequest, opts ...grpc.CallOption) (*OAuthConsentResponse, error) {
	out := new(OAuthConsentResponse)
	err := c.cc.Invoke(ctx, "/programming_lab.prolab_accounts.OAuthService/OAuthConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServiceServer is the server API for OAuthService service.
type OAuthServiceServer interface {
	StartOAuthLogin(context.Context, *StartOAuthLoginRequest) (*StartOAuthLoginResponse, error)
	OAuthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginResponse, error)
	StartOAuthConsent(context.Context, *StartOAuthConsentRequest) (*StartOAuthConsentResponse, error)
	OAuthConsent(context.Context, *OAuthConsentRequest) (*OAuthConsentResponse, error)
}

func RegisterOAuthServiceServer(s *grpc.Server, srv OAuthServiceServer) {
	s.RegisterService(&_OAuthService_serviceDesc, srv)
}

func _OAuthService_StartOAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).StartOAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.OAuthService/StartOAuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).StartOAuthLogin(ctx, req.(*StartOAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_OAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).OAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.OAuthService/OAuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).OAuthLogin(ctx, req.(*OAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_StartOAuthConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOAuthConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).StartOAuthConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.OAuthService/StartOAuthConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).StartOAuthConsent(ctx, req.(*StartOAuthConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_OAuthConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).OAuthConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/programming_lab.prolab_accounts.OAuthService/OAuthConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).OAuthConsent(ctx, req.(*OAuthConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OAuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "programming_lab.prolab_accounts.OAuthService",
	HandlerType: (*OAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartOAuthLogin",
			Handler:    _OAuthService_StartOAuthLogin_Handler,
		},
		{
			MethodName: "OAuthLogin",
			Handler:    _OAuthService_OAuthLogin_Handler,
		},
		{
			MethodName: "StartOAuthConsent",
			Handler:    _OAuthService_StartOAuthConsent_Handler,
		},
		{
			MethodName: "OAuthConsent",
			Handler:    _OAuthService_OAuthConsent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth.proto",
}

func (m *StartOAuthLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartOAuthLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoginChallenge) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.LoginChallenge)))
		i += copy(dAtA[i:], m.LoginChallenge)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartOAuthLoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartOAuthLoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Skip {
		dAtA[i] = 0x8
		i++
		if m.Skip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OAuthLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoginChallenge) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.LoginChallenge)))
		i += copy(dAtA[i:], m.LoginChallenge)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Remember {
		dAtA[i] = 0x20
		i++
		if m.Remember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OAuthLoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthLoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartOAuthConsentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartOAuthConsentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ConsentChallenge) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.ConsentChallenge)))
		i += copy(dAtA[i:], m.ConsentChallenge)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartOAuthConsentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartOAuthConsentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Skip {
		dAtA[i] = 0x8
		i++
		if m.Skip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	if len(m.RequestedScopes) > 0 {
		for _, s := range m.RequestedScopes {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Client != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOauth(dAtA, i, uint64(m.Client.Size()))
		n1, err := m.Client.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OAuthConsentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthConsentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ConsentChallenge) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.ConsentChallenge)))
		i += copy(dAtA[i:], m.ConsentChallenge)
	}
	if m.Accept {
		dAtA[i] = 0x10
		i++
		if m.Accept {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.GrantScopes) > 0 {
		for _, s := range m.GrantScopes {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Remember {
		dAtA[i] = 0x20
		i++
		if m.Remember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OAuthConsentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthConsentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOauth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StartOAuthLoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoginChallenge)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartOAuthLoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Skip {
		n += 2
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OAuthLoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoginChallenge)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.Remember {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OAuthLoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartOAuthConsentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsentChallenge)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartOAuthConsentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Skip {
		n += 2
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if len(m.RequestedScopes) > 0 {
		for _, s := range m.RequestedScopes {
			l = len(s)
			n += 1 + l + sovOauth(uint64(l))
		}
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OAuthConsentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsentChallenge)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.Accept {
		n += 2
	}
	if len(m.GrantScopes) > 0 {
		for _, s := range m.GrantScopes {
			l = len(s)
			n += 1 + l + sovOauth(uint64(l))
		}
	}
	if m.Remember {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OAuthConsentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOauth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOauth(x uint64) (n int) {
	return sovOauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StartOAuthLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartOAuthLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartOAuthLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartOAuthLoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartOAuthLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartOAuthLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skip = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Remember = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthLoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartOAuthConsentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartOAuthConsentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartOAuthConsentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsentChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsentChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartOAuthConsentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartOAuthConsentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartOAuthConsentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skip = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedScopes = append(m.RequestedScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &_type.Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthConsentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthConsentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthConsentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsentChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsentChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accept = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantScopes = append(m.GrantScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Remember = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthConsentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthConsentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthConsentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOauth
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthOauth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOauth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOauth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthOauth
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOauth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOauth   = fmt.Errorf("proto: integer overflow")
)
