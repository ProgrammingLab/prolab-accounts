// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AchievementUser is an object representing the database table.
type AchievementUser struct {
	ID            int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	AchievementID int64 `boil:"achievement_id" json:"achievement_id" toml:"achievement_id" yaml:"achievement_id"`
	UserID        int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Priority      int   `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`

	R *achievementUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L achievementUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AchievementUserColumns = struct {
	ID            string
	AchievementID string
	UserID        string
	Priority      string
}{
	ID:            "id",
	AchievementID: "achievement_id",
	UserID:        "user_id",
	Priority:      "priority",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AchievementUserWhere = struct {
	ID            whereHelperint64
	AchievementID whereHelperint64
	UserID        whereHelperint64
	Priority      whereHelperint
}{
	ID:            whereHelperint64{field: `id`},
	AchievementID: whereHelperint64{field: `achievement_id`},
	UserID:        whereHelperint64{field: `user_id`},
	Priority:      whereHelperint{field: `priority`},
}

// AchievementUserRels is where relationship names are stored.
var AchievementUserRels = struct {
	Achievement string
	User        string
}{
	Achievement: "Achievement",
	User:        "User",
}

// achievementUserR is where relationships are stored.
type achievementUserR struct {
	Achievement *Achievement
	User        *User
}

// NewStruct creates a new relationship struct
func (*achievementUserR) NewStruct() *achievementUserR {
	return &achievementUserR{}
}

// achievementUserL is where Load methods for each relationship are stored.
type achievementUserL struct{}

var (
	achievementUserColumns               = []string{"id", "achievement_id", "user_id", "priority"}
	achievementUserColumnsWithoutDefault = []string{"achievement_id", "user_id", "priority"}
	achievementUserColumnsWithDefault    = []string{"id"}
	achievementUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// AchievementUserSlice is an alias for a slice of pointers to AchievementUser.
	// This should generally be used opposed to []AchievementUser.
	AchievementUserSlice []*AchievementUser
	// AchievementUserHook is the signature for custom AchievementUser hook methods
	AchievementUserHook func(context.Context, boil.ContextExecutor, *AchievementUser) error

	achievementUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	achievementUserType                 = reflect.TypeOf(&AchievementUser{})
	achievementUserMapping              = queries.MakeStructMapping(achievementUserType)
	achievementUserPrimaryKeyMapping, _ = queries.BindMapping(achievementUserType, achievementUserMapping, achievementUserPrimaryKeyColumns)
	achievementUserInsertCacheMut       sync.RWMutex
	achievementUserInsertCache          = make(map[string]insertCache)
	achievementUserUpdateCacheMut       sync.RWMutex
	achievementUserUpdateCache          = make(map[string]updateCache)
	achievementUserUpsertCacheMut       sync.RWMutex
	achievementUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var achievementUserBeforeInsertHooks []AchievementUserHook
var achievementUserBeforeUpdateHooks []AchievementUserHook
var achievementUserBeforeDeleteHooks []AchievementUserHook
var achievementUserBeforeUpsertHooks []AchievementUserHook

var achievementUserAfterInsertHooks []AchievementUserHook
var achievementUserAfterSelectHooks []AchievementUserHook
var achievementUserAfterUpdateHooks []AchievementUserHook
var achievementUserAfterDeleteHooks []AchievementUserHook
var achievementUserAfterUpsertHooks []AchievementUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AchievementUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AchievementUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AchievementUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AchievementUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AchievementUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AchievementUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AchievementUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AchievementUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AchievementUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAchievementUserHook registers your hook function for all future operations.
func AddAchievementUserHook(hookPoint boil.HookPoint, achievementUserHook AchievementUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		achievementUserBeforeInsertHooks = append(achievementUserBeforeInsertHooks, achievementUserHook)
	case boil.BeforeUpdateHook:
		achievementUserBeforeUpdateHooks = append(achievementUserBeforeUpdateHooks, achievementUserHook)
	case boil.BeforeDeleteHook:
		achievementUserBeforeDeleteHooks = append(achievementUserBeforeDeleteHooks, achievementUserHook)
	case boil.BeforeUpsertHook:
		achievementUserBeforeUpsertHooks = append(achievementUserBeforeUpsertHooks, achievementUserHook)
	case boil.AfterInsertHook:
		achievementUserAfterInsertHooks = append(achievementUserAfterInsertHooks, achievementUserHook)
	case boil.AfterSelectHook:
		achievementUserAfterSelectHooks = append(achievementUserAfterSelectHooks, achievementUserHook)
	case boil.AfterUpdateHook:
		achievementUserAfterUpdateHooks = append(achievementUserAfterUpdateHooks, achievementUserHook)
	case boil.AfterDeleteHook:
		achievementUserAfterDeleteHooks = append(achievementUserAfterDeleteHooks, achievementUserHook)
	case boil.AfterUpsertHook:
		achievementUserAfterUpsertHooks = append(achievementUserAfterUpsertHooks, achievementUserHook)
	}
}

// One returns a single achievementUser record from the query.
func (q achievementUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AchievementUser, error) {
	o := &AchievementUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "record: failed to execute a one query for achievement_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AchievementUser records from the query.
func (q achievementUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (AchievementUserSlice, error) {
	var o []*AchievementUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "record: failed to assign all query results to AchievementUser slice")
	}

	if len(achievementUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AchievementUser records in the query.
func (q achievementUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to count achievement_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q achievementUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "record: failed to check if achievement_users exists")
	}

	return count > 0, nil
}

// Achievement pointed to by the foreign key.
func (o *AchievementUser) Achievement(mods ...qm.QueryMod) achievementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AchievementID),
	}

	queryMods = append(queryMods, mods...)

	query := Achievements(queryMods...)
	queries.SetFrom(query.Query, "\"achievements\"")

	return query
}

// User pointed to by the foreign key.
func (o *AchievementUser) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadAchievement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (achievementUserL) LoadAchievement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAchievementUser interface{}, mods queries.Applicator) error {
	var slice []*AchievementUser
	var object *AchievementUser

	if singular {
		object = maybeAchievementUser.(*AchievementUser)
	} else {
		slice = *maybeAchievementUser.(*[]*AchievementUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &achievementUserR{}
		}
		args = append(args, object.AchievementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &achievementUserR{}
			}

			for _, a := range args {
				if a == obj.AchievementID {
					continue Outer
				}
			}

			args = append(args, obj.AchievementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`achievements`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Achievement")
	}

	var resultSlice []*Achievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Achievement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for achievements")
	}

	if len(achievementUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Achievement = foreign
		if foreign.R == nil {
			foreign.R = &achievementR{}
		}
		foreign.R.AchievementUsers = append(foreign.R.AchievementUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AchievementID == foreign.ID {
				local.R.Achievement = foreign
				if foreign.R == nil {
					foreign.R = &achievementR{}
				}
				foreign.R.AchievementUsers = append(foreign.R.AchievementUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (achievementUserL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAchievementUser interface{}, mods queries.Applicator) error {
	var slice []*AchievementUser
	var object *AchievementUser

	if singular {
		object = maybeAchievementUser.(*AchievementUser)
	} else {
		slice = *maybeAchievementUser.(*[]*AchievementUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &achievementUserR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &achievementUserR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(achievementUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AchievementUsers = append(foreign.R.AchievementUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AchievementUsers = append(foreign.R.AchievementUsers, local)
				break
			}
		}
	}

	return nil
}

// SetAchievement of the achievementUser to the related item.
// Sets o.R.Achievement to related.
// Adds o to related.R.AchievementUsers.
func (o *AchievementUser) SetAchievement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Achievement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"achievement_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"achievement_id"}),
		strmangle.WhereClause("\"", "\"", 2, achievementUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AchievementID = related.ID
	if o.R == nil {
		o.R = &achievementUserR{
			Achievement: related,
		}
	} else {
		o.R.Achievement = related
	}

	if related.R == nil {
		related.R = &achievementR{
			AchievementUsers: AchievementUserSlice{o},
		}
	} else {
		related.R.AchievementUsers = append(related.R.AchievementUsers, o)
	}

	return nil
}

// SetUser of the achievementUser to the related item.
// Sets o.R.User to related.
// Adds o to related.R.AchievementUsers.
func (o *AchievementUser) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"achievement_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, achievementUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &achievementUserR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			AchievementUsers: AchievementUserSlice{o},
		}
	} else {
		related.R.AchievementUsers = append(related.R.AchievementUsers, o)
	}

	return nil
}

// AchievementUsers retrieves all the records using an executor.
func AchievementUsers(mods ...qm.QueryMod) achievementUserQuery {
	mods = append(mods, qm.From("\"achievement_users\""))
	return achievementUserQuery{NewQuery(mods...)}
}

// FindAchievementUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAchievementUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AchievementUser, error) {
	achievementUserObj := &AchievementUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"achievement_users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, achievementUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "record: unable to select from achievement_users")
	}

	return achievementUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AchievementUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("record: no achievement_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(achievementUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	achievementUserInsertCacheMut.RLock()
	cache, cached := achievementUserInsertCache[key]
	achievementUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			achievementUserColumns,
			achievementUserColumnsWithDefault,
			achievementUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(achievementUserType, achievementUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(achievementUserType, achievementUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"achievement_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"achievement_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "record: unable to insert into achievement_users")
	}

	if !cached {
		achievementUserInsertCacheMut.Lock()
		achievementUserInsertCache[key] = cache
		achievementUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AchievementUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AchievementUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	achievementUserUpdateCacheMut.RLock()
	cache, cached := achievementUserUpdateCache[key]
	achievementUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			achievementUserColumns,
			achievementUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("record: unable to update achievement_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"achievement_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, achievementUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(achievementUserType, achievementUserMapping, append(wl, achievementUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to update achievement_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by update for achievement_users")
	}

	if !cached {
		achievementUserUpdateCacheMut.Lock()
		achievementUserUpdateCache[key] = cache
		achievementUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q achievementUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to update all for achievement_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to retrieve rows affected for achievement_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AchievementUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("record: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"achievement_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, achievementUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to update all in achievementUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to retrieve rows affected all in update all achievementUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AchievementUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("record: no achievement_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(achievementUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	achievementUserUpsertCacheMut.RLock()
	cache, cached := achievementUserUpsertCache[key]
	achievementUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			achievementUserColumns,
			achievementUserColumnsWithDefault,
			achievementUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			achievementUserColumns,
			achievementUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("record: unable to upsert achievement_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(achievementUserPrimaryKeyColumns))
			copy(conflict, achievementUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"achievement_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(achievementUserType, achievementUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(achievementUserType, achievementUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "record: unable to upsert achievement_users")
	}

	if !cached {
		achievementUserUpsertCacheMut.Lock()
		achievementUserUpsertCache[key] = cache
		achievementUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AchievementUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AchievementUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("record: no AchievementUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), achievementUserPrimaryKeyMapping)
	sql := "DELETE FROM \"achievement_users\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to delete from achievement_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by delete for achievement_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q achievementUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("record: no achievementUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to delete all from achievement_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by deleteall for achievement_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AchievementUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("record: no AchievementUser slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(achievementUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"achievement_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, achievementUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to delete all from achievementUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by deleteall for achievement_users")
	}

	if len(achievementUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AchievementUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAchievementUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AchievementUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AchievementUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"achievement_users\".* FROM \"achievement_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, achievementUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "record: unable to reload all in AchievementUserSlice")
	}

	*o = slice

	return nil
}

// AchievementUserExists checks if the AchievementUser row exists.
func AchievementUserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"achievement_users\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "record: unable to check if achievement_users exists")
	}

	return exists, nil
}
