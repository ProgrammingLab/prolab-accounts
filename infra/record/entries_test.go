// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEntries(t *testing.T) {
	t.Parallel()

	query := Entries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEntriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEntriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Entries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEntriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EntrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEntriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EntryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Entry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EntryExists to return true, but got false.")
	}
}

func testEntriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	entryFound, err := FindEntry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if entryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEntriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Entries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEntriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Entries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEntriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	entryOne := &Entry{}
	entryTwo := &Entry{}
	if err = randomize.Struct(seed, entryOne, entryDBTypes, false, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}
	if err = randomize.Struct(seed, entryTwo, entryDBTypes, false, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = entryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = entryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Entries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEntriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	entryOne := &Entry{}
	entryTwo := &Entry{}
	if err = randomize.Struct(seed, entryOne, entryDBTypes, false, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}
	if err = randomize.Struct(seed, entryTwo, entryDBTypes, false, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = entryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = entryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func entryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func entryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Entry) error {
	*o = Entry{}
	return nil
}

func testEntriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Entry{}
	o := &Entry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, entryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Entry object: %s", err)
	}

	AddEntryHook(boil.BeforeInsertHook, entryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	entryBeforeInsertHooks = []EntryHook{}

	AddEntryHook(boil.AfterInsertHook, entryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	entryAfterInsertHooks = []EntryHook{}

	AddEntryHook(boil.AfterSelectHook, entryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	entryAfterSelectHooks = []EntryHook{}

	AddEntryHook(boil.BeforeUpdateHook, entryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	entryBeforeUpdateHooks = []EntryHook{}

	AddEntryHook(boil.AfterUpdateHook, entryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	entryAfterUpdateHooks = []EntryHook{}

	AddEntryHook(boil.BeforeDeleteHook, entryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	entryBeforeDeleteHooks = []EntryHook{}

	AddEntryHook(boil.AfterDeleteHook, entryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	entryAfterDeleteHooks = []EntryHook{}

	AddEntryHook(boil.BeforeUpsertHook, entryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	entryBeforeUpsertHooks = []EntryHook{}

	AddEntryHook(boil.AfterUpsertHook, entryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	entryAfterUpsertHooks = []EntryHook{}
}

func testEntriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEntriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(entryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEntryToOneBlogUsingBlog(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Entry
	var foreign Blog

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, entryDBTypes, false, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, blogDBTypes, false, blogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blog struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BlogID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Blog().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EntrySlice{&local}
	if err = local.L.LoadBlog(ctx, tx, false, (*[]*Entry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Blog == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Blog = nil
	if err = local.L.LoadBlog(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Blog == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEntryToOneUserUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Entry
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, entryDBTypes, false, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EntrySlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*Entry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEntryToOneSetOpBlogUsingBlog(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entry
	var b, c Blog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entryDBTypes, false, strmangle.SetComplement(entryPrimaryKeyColumns, entryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, blogDBTypes, false, strmangle.SetComplement(blogPrimaryKeyColumns, blogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, blogDBTypes, false, strmangle.SetComplement(blogPrimaryKeyColumns, blogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Blog{&b, &c} {
		err = a.SetBlog(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Blog != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Entries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BlogID != x.ID {
			t.Error("foreign key was wrong value", a.BlogID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BlogID))
		reflect.Indirect(reflect.ValueOf(&a.BlogID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BlogID != x.ID {
			t.Error("foreign key was wrong value", a.BlogID, x.ID)
		}
	}
}
func testEntryToOneSetOpUserUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entry
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entryDBTypes, false, strmangle.SetComplement(entryPrimaryKeyColumns, entryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID, x.ID)
		}
	}
}

func testEntriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEntriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EntrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEntriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Entries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	entryDBTypes = map[string]string{`ID`: `bigint`, `Title`: `character varying`, `Description`: `character varying`, `Content`: `text`, `Link`: `character varying`, `AuthorID`: `bigint`, `GUID`: `character varying`, `BlogID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `ImageURL`: `character varying`, `PublishedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testEntriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(entryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(entryColumns) == len(entryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, entryDBTypes, true, entryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEntriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(entryColumns) == len(entryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Entry{}
	if err = randomize.Struct(seed, o, entryDBTypes, true, entryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, entryDBTypes, true, entryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(entryColumns, entryPrimaryKeyColumns) {
		fields = entryColumns
	} else {
		fields = strmangle.SetComplement(
			entryColumns,
			entryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EntrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEntriesUpsert(t *testing.T) {
	t.Parallel()

	if len(entryColumns) == len(entryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Entry{}
	if err = randomize.Struct(seed, &o, entryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Entry: %s", err)
	}

	count, err := Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, entryDBTypes, false, entryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Entry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Entry: %s", err)
	}

	count, err = Entries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
