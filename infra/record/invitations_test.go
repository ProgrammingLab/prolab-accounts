// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvitations(t *testing.T) {
	t.Parallel()

	query := Invitations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvitationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Invitations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvitationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InvitationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Invitation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvitationExists to return true, but got false.")
	}
}

func testInvitationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	invitationFound, err := FindInvitation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if invitationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvitationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Invitations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvitationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Invitations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvitationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invitationOne := &Invitation{}
	invitationTwo := &Invitation{}
	if err = randomize.Struct(seed, invitationOne, invitationDBTypes, false, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}
	if err = randomize.Struct(seed, invitationTwo, invitationDBTypes, false, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invitationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invitationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Invitations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvitationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invitationOne := &Invitation{}
	invitationTwo := &Invitation{}
	if err = randomize.Struct(seed, invitationOne, invitationDBTypes, false, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}
	if err = randomize.Struct(seed, invitationTwo, invitationDBTypes, false, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invitationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invitationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func invitationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func invitationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Invitation) error {
	*o = Invitation{}
	return nil
}

func testInvitationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Invitation{}
	o := &Invitation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invitationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Invitation object: %s", err)
	}

	AddInvitationHook(boil.BeforeInsertHook, invitationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invitationBeforeInsertHooks = []InvitationHook{}

	AddInvitationHook(boil.AfterInsertHook, invitationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invitationAfterInsertHooks = []InvitationHook{}

	AddInvitationHook(boil.AfterSelectHook, invitationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invitationAfterSelectHooks = []InvitationHook{}

	AddInvitationHook(boil.BeforeUpdateHook, invitationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invitationBeforeUpdateHooks = []InvitationHook{}

	AddInvitationHook(boil.AfterUpdateHook, invitationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invitationAfterUpdateHooks = []InvitationHook{}

	AddInvitationHook(boil.BeforeDeleteHook, invitationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invitationBeforeDeleteHooks = []InvitationHook{}

	AddInvitationHook(boil.AfterDeleteHook, invitationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invitationAfterDeleteHooks = []InvitationHook{}

	AddInvitationHook(boil.BeforeUpsertHook, invitationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invitationBeforeUpsertHooks = []InvitationHook{}

	AddInvitationHook(boil.AfterUpsertHook, invitationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invitationAfterUpsertHooks = []InvitationHook{}
}

func testInvitationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvitationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(invitationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvitationToOneUserUsingInviter(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Invitation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, invitationDBTypes, false, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InviterID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Inviter().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := InvitationSlice{&local}
	if err = local.L.LoadInviter(ctx, tx, false, (*[]*Invitation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Inviter == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Inviter = nil
	if err = local.L.LoadInviter(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Inviter == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInvitationToOneSetOpUserUsingInviter(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invitation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invitationDBTypes, false, strmangle.SetComplement(invitationPrimaryKeyColumns, invitationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetInviter(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Inviter != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InviterInvitations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InviterID != x.ID {
			t.Error("foreign key was wrong value", a.InviterID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InviterID))
		reflect.Indirect(reflect.ValueOf(&a.InviterID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InviterID != x.ID {
			t.Error("foreign key was wrong value", a.InviterID, x.ID)
		}
	}
}

func testInvitationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvitationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvitationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvitationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Invitations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invitationDBTypes = map[string]string{`ID`: `bigint`, `Code`: `character varying`, `Email`: `character varying`, `InviterID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testInvitationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invitationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(invitationColumns) == len(invitationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvitationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invitationColumns) == len(invitationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Invitation{}
	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invitationDBTypes, true, invitationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invitationColumns, invitationPrimaryKeyColumns) {
		fields = invitationColumns
	} else {
		fields = strmangle.SetComplement(
			invitationColumns,
			invitationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InvitationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvitationsUpsert(t *testing.T) {
	t.Parallel()

	if len(invitationColumns) == len(invitationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Invitation{}
	if err = randomize.Struct(seed, &o, invitationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Invitation: %s", err)
	}

	count, err := Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, invitationDBTypes, false, invitationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invitation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Invitation: %s", err)
	}

	count, err = Invitations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
