// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPasswordResets(t *testing.T) {
	t.Parallel()

	query := PasswordResets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPasswordResetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPasswordResetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PasswordResets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPasswordResetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PasswordResetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPasswordResetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PasswordResetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PasswordReset exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PasswordResetExists to return true, but got false.")
	}
}

func testPasswordResetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	passwordResetFound, err := FindPasswordReset(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if passwordResetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPasswordResetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PasswordResets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPasswordResetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PasswordResets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPasswordResetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	passwordResetOne := &PasswordReset{}
	passwordResetTwo := &PasswordReset{}
	if err = randomize.Struct(seed, passwordResetOne, passwordResetDBTypes, false, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}
	if err = randomize.Struct(seed, passwordResetTwo, passwordResetDBTypes, false, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = passwordResetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = passwordResetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PasswordResets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPasswordResetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	passwordResetOne := &PasswordReset{}
	passwordResetTwo := &PasswordReset{}
	if err = randomize.Struct(seed, passwordResetOne, passwordResetDBTypes, false, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}
	if err = randomize.Struct(seed, passwordResetTwo, passwordResetDBTypes, false, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = passwordResetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = passwordResetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func passwordResetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func passwordResetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PasswordReset) error {
	*o = PasswordReset{}
	return nil
}

func testPasswordResetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PasswordReset{}
	o := &PasswordReset{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, passwordResetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PasswordReset object: %s", err)
	}

	AddPasswordResetHook(boil.BeforeInsertHook, passwordResetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	passwordResetBeforeInsertHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.AfterInsertHook, passwordResetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	passwordResetAfterInsertHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.AfterSelectHook, passwordResetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	passwordResetAfterSelectHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.BeforeUpdateHook, passwordResetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	passwordResetBeforeUpdateHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.AfterUpdateHook, passwordResetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	passwordResetAfterUpdateHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.BeforeDeleteHook, passwordResetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	passwordResetBeforeDeleteHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.AfterDeleteHook, passwordResetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	passwordResetAfterDeleteHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.BeforeUpsertHook, passwordResetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	passwordResetBeforeUpsertHooks = []PasswordResetHook{}

	AddPasswordResetHook(boil.AfterUpsertHook, passwordResetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	passwordResetAfterUpsertHooks = []PasswordResetHook{}
}

func testPasswordResetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPasswordResetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(passwordResetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPasswordResetToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PasswordReset
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, passwordResetDBTypes, false, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PasswordResetSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*PasswordReset)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPasswordResetToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PasswordReset
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, passwordResetDBTypes, false, strmangle.SetComplement(passwordResetPrimaryKeyColumns, passwordResetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PasswordResets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testPasswordResetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPasswordResetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PasswordResetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPasswordResetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PasswordResets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	passwordResetDBTypes = map[string]string{`ID`: `bigint`, `TokenDigest`: `character varying`, `Email`: `character varying`, `UserID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                    = bytes.MinRead
)

func testPasswordResetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(passwordResetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(passwordResetColumns) == len(passwordResetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPasswordResetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(passwordResetColumns) == len(passwordResetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PasswordReset{}
	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, passwordResetDBTypes, true, passwordResetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(passwordResetColumns, passwordResetPrimaryKeyColumns) {
		fields = passwordResetColumns
	} else {
		fields = strmangle.SetComplement(
			passwordResetColumns,
			passwordResetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PasswordResetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPasswordResetsUpsert(t *testing.T) {
	t.Parallel()

	if len(passwordResetColumns) == len(passwordResetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PasswordReset{}
	if err = randomize.Struct(seed, &o, passwordResetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PasswordReset: %s", err)
	}

	count, err := PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, passwordResetDBTypes, false, passwordResetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PasswordReset struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PasswordReset: %s", err)
	}

	count, err = PasswordResets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
