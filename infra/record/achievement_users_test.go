// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAchievementUsers(t *testing.T) {
	t.Parallel()

	query := AchievementUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAchievementUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAchievementUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AchievementUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAchievementUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AchievementUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAchievementUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AchievementUserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AchievementUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AchievementUserExists to return true, but got false.")
	}
}

func testAchievementUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	achievementUserFound, err := FindAchievementUser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if achievementUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAchievementUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AchievementUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAchievementUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AchievementUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAchievementUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	achievementUserOne := &AchievementUser{}
	achievementUserTwo := &AchievementUser{}
	if err = randomize.Struct(seed, achievementUserOne, achievementUserDBTypes, false, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}
	if err = randomize.Struct(seed, achievementUserTwo, achievementUserDBTypes, false, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = achievementUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = achievementUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AchievementUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAchievementUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	achievementUserOne := &AchievementUser{}
	achievementUserTwo := &AchievementUser{}
	if err = randomize.Struct(seed, achievementUserOne, achievementUserDBTypes, false, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}
	if err = randomize.Struct(seed, achievementUserTwo, achievementUserDBTypes, false, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = achievementUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = achievementUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func achievementUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func achievementUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AchievementUser) error {
	*o = AchievementUser{}
	return nil
}

func testAchievementUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AchievementUser{}
	o := &AchievementUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, achievementUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AchievementUser object: %s", err)
	}

	AddAchievementUserHook(boil.BeforeInsertHook, achievementUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	achievementUserBeforeInsertHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.AfterInsertHook, achievementUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	achievementUserAfterInsertHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.AfterSelectHook, achievementUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	achievementUserAfterSelectHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.BeforeUpdateHook, achievementUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	achievementUserBeforeUpdateHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.AfterUpdateHook, achievementUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	achievementUserAfterUpdateHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.BeforeDeleteHook, achievementUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	achievementUserBeforeDeleteHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.AfterDeleteHook, achievementUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	achievementUserAfterDeleteHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.BeforeUpsertHook, achievementUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	achievementUserBeforeUpsertHooks = []AchievementUserHook{}

	AddAchievementUserHook(boil.AfterUpsertHook, achievementUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	achievementUserAfterUpsertHooks = []AchievementUserHook{}
}

func testAchievementUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAchievementUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(achievementUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAchievementUserToOneAchievementUsingAchievement(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AchievementUser
	var foreign Achievement

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, achievementUserDBTypes, false, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, achievementDBTypes, false, achievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Achievement struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AchievementID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Achievement().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AchievementUserSlice{&local}
	if err = local.L.LoadAchievement(ctx, tx, false, (*[]*AchievementUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Achievement == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Achievement = nil
	if err = local.L.LoadAchievement(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Achievement == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAchievementUserToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AchievementUser
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, achievementUserDBTypes, false, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AchievementUserSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*AchievementUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAchievementUserToOneSetOpAchievementUsingAchievement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AchievementUser
	var b, c Achievement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, achievementUserDBTypes, false, strmangle.SetComplement(achievementUserPrimaryKeyColumns, achievementUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, achievementDBTypes, false, strmangle.SetComplement(achievementPrimaryKeyColumns, achievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, achievementDBTypes, false, strmangle.SetComplement(achievementPrimaryKeyColumns, achievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Achievement{&b, &c} {
		err = a.SetAchievement(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Achievement != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AchievementUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AchievementID != x.ID {
			t.Error("foreign key was wrong value", a.AchievementID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AchievementID))
		reflect.Indirect(reflect.ValueOf(&a.AchievementID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AchievementID != x.ID {
			t.Error("foreign key was wrong value", a.AchievementID, x.ID)
		}
	}
}
func testAchievementUserToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AchievementUser
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, achievementUserDBTypes, false, strmangle.SetComplement(achievementUserPrimaryKeyColumns, achievementUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AchievementUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testAchievementUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAchievementUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AchievementUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAchievementUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AchievementUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	achievementUserDBTypes = map[string]string{`ID`: `bigint`, `AchievementID`: `bigint`, `UserID`: `bigint`, `Priority`: `integer`}
	_                      = bytes.MinRead
)

func testAchievementUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(achievementUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(achievementUserColumns) == len(achievementUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAchievementUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(achievementUserColumns) == len(achievementUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AchievementUser{}
	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, achievementUserDBTypes, true, achievementUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(achievementUserColumns, achievementUserPrimaryKeyColumns) {
		fields = achievementUserColumns
	} else {
		fields = strmangle.SetComplement(
			achievementUserColumns,
			achievementUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AchievementUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAchievementUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(achievementUserColumns) == len(achievementUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AchievementUser{}
	if err = randomize.Struct(seed, &o, achievementUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AchievementUser: %s", err)
	}

	count, err := AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, achievementUserDBTypes, false, achievementUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AchievementUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AchievementUser: %s", err)
	}

	count, err = AchievementUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
