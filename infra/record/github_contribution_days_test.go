// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGithubContributionDays(t *testing.T) {
	t.Parallel()

	query := GithubContributionDays()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGithubContributionDaysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGithubContributionDaysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GithubContributionDays().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGithubContributionDaysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GithubContributionDaySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGithubContributionDaysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GithubContributionDayExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GithubContributionDay exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GithubContributionDayExists to return true, but got false.")
	}
}

func testGithubContributionDaysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	githubContributionDayFound, err := FindGithubContributionDay(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if githubContributionDayFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGithubContributionDaysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GithubContributionDays().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGithubContributionDaysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GithubContributionDays().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGithubContributionDaysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	githubContributionDayOne := &GithubContributionDay{}
	githubContributionDayTwo := &GithubContributionDay{}
	if err = randomize.Struct(seed, githubContributionDayOne, githubContributionDayDBTypes, false, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}
	if err = randomize.Struct(seed, githubContributionDayTwo, githubContributionDayDBTypes, false, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = githubContributionDayOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = githubContributionDayTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GithubContributionDays().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGithubContributionDaysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	githubContributionDayOne := &GithubContributionDay{}
	githubContributionDayTwo := &GithubContributionDay{}
	if err = randomize.Struct(seed, githubContributionDayOne, githubContributionDayDBTypes, false, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}
	if err = randomize.Struct(seed, githubContributionDayTwo, githubContributionDayDBTypes, false, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = githubContributionDayOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = githubContributionDayTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func githubContributionDayBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func githubContributionDayAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GithubContributionDay) error {
	*o = GithubContributionDay{}
	return nil
}

func testGithubContributionDaysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GithubContributionDay{}
	o := &GithubContributionDay{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay object: %s", err)
	}

	AddGithubContributionDayHook(boil.BeforeInsertHook, githubContributionDayBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	githubContributionDayBeforeInsertHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.AfterInsertHook, githubContributionDayAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	githubContributionDayAfterInsertHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.AfterSelectHook, githubContributionDayAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	githubContributionDayAfterSelectHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.BeforeUpdateHook, githubContributionDayBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	githubContributionDayBeforeUpdateHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.AfterUpdateHook, githubContributionDayAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	githubContributionDayAfterUpdateHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.BeforeDeleteHook, githubContributionDayBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	githubContributionDayBeforeDeleteHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.AfterDeleteHook, githubContributionDayAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	githubContributionDayAfterDeleteHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.BeforeUpsertHook, githubContributionDayBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	githubContributionDayBeforeUpsertHooks = []GithubContributionDayHook{}

	AddGithubContributionDayHook(boil.AfterUpsertHook, githubContributionDayAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	githubContributionDayAfterUpsertHooks = []GithubContributionDayHook{}
}

func testGithubContributionDaysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGithubContributionDaysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(githubContributionDayColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGithubContributionDayToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GithubContributionDay
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GithubContributionDaySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*GithubContributionDay)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGithubContributionDayToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GithubContributionDay
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, githubContributionDayDBTypes, false, strmangle.SetComplement(githubContributionDayPrimaryKeyColumns, githubContributionDayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GithubContributionDays[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testGithubContributionDayToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GithubContributionDay
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, githubContributionDayDBTypes, false, strmangle.SetComplement(githubContributionDayPrimaryKeyColumns, githubContributionDayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GithubContributionDays) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGithubContributionDaysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGithubContributionDaysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GithubContributionDaySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGithubContributionDaysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GithubContributionDays().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	githubContributionDayDBTypes = map[string]string{`ID`: `bigint`, `Count`: `integer`, `Date`: `date`, `UserID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                            = bytes.MinRead
)

func testGithubContributionDaysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(githubContributionDayPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(githubContributionDayColumns) == len(githubContributionDayPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGithubContributionDaysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(githubContributionDayColumns) == len(githubContributionDayPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GithubContributionDay{}
	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, githubContributionDayDBTypes, true, githubContributionDayPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(githubContributionDayColumns, githubContributionDayPrimaryKeyColumns) {
		fields = githubContributionDayColumns
	} else {
		fields = strmangle.SetComplement(
			githubContributionDayColumns,
			githubContributionDayPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GithubContributionDaySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGithubContributionDaysUpsert(t *testing.T) {
	t.Parallel()

	if len(githubContributionDayColumns) == len(githubContributionDayPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GithubContributionDay{}
	if err = randomize.Struct(seed, &o, githubContributionDayDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GithubContributionDay: %s", err)
	}

	count, err := GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, githubContributionDayDBTypes, false, githubContributionDayPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GithubContributionDay struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GithubContributionDay: %s", err)
	}

	count, err = GithubContributionDays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
